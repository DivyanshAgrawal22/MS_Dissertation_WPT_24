{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "436ad7b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:02.260816Z",
     "iopub.status.busy": "2024-07-19T19:53:02.260367Z",
     "iopub.status.idle": "2024-07-19T19:53:16.875394Z",
     "shell.execute_reply": "2024-07-19T19:53:16.874328Z"
    },
    "papermill": {
     "duration": 14.631271,
     "end_time": "2024-07-19T19:53:16.878121",
     "exception": false,
     "start_time": "2024-07-19T19:53:02.246850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.42.3)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.13.1)\r\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.23.4)\r\n",
      "Requirement already satisfied: numpy<2.0,>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.1)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.12.25)\r\n",
      "Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\r\n",
      "Requirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.3)\r\n",
      "Requirement already satisfied: tokenizers<0.20,>=0.19 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.19.1)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\r\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.5.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.9.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.7.4)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f318e6c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:16.905085Z",
     "iopub.status.busy": "2024-07-19T19:53:16.904736Z",
     "iopub.status.idle": "2024-07-19T19:53:47.526275Z",
     "shell.execute_reply": "2024-07-19T19:53:47.525276Z"
    },
    "papermill": {
     "duration": 30.638057,
     "end_time": "2024-07-19T19:53:47.528823",
     "exception": false,
     "start_time": "2024-07-19T19:53:16.890766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-19 19:53:36.837235: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-19 19:53:36.837365: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-19 19:53:36.972368: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.model_selection import train_test_split, KFold\n",
    "from gensim.models import FastText\n",
    "from transformers import BertTokenizer, TFBertModel, TFBertForSequenceClassification, BertModel\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Input, Dense, Dropout, Concatenate, Embedding\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score, precision_score, recall_score, f1_score, confusion_matrix\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "import fasttext.util\n",
    "from gensim.models import KeyedVectors\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset, WeightedRandomSampler\n",
    "from sklearn.utils.class_weight import compute_class_weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "03c7d0f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:47.553323Z",
     "iopub.status.busy": "2024-07-19T19:53:47.552643Z",
     "iopub.status.idle": "2024-07-19T19:53:50.024971Z",
     "shell.execute_reply": "2024-07-19T19:53:50.023782Z"
    },
    "papermill": {
     "duration": 2.487454,
     "end_time": "2024-07-19T19:53:50.027778",
     "exception": false,
     "start_time": "2024-07-19T19:53:47.540324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "disney = pd.read_csv('/kaggle/input/disneyland-reviews/DisneylandReviews.csv', encoding='latin-1')\n",
    "universal = pd.read_csv('/kaggle/input/reviewuniversalstudio/universal_studio_branches.csv')\n",
    "museum = pd.read_csv('/kaggle/input/trip-advisor-review-british-museum-in-london/Data_Review_British_Museum.csv')\n",
    "\n",
    "newquay = pd.read_csv('/kaggle/input/wild-planet-trust-review-data/Newquay Reviews.csv')\n",
    "newquay1 = pd.read_excel('/kaggle/input/wild-planet-trust-review-data/Newquay Reviews.xlsx')\n",
    "\n",
    "paignton = pd.read_csv('/kaggle/input/wild-planet-trust-review-data/Paignton Reviews.csv')\n",
    "paignton1 = pd.read_excel('/kaggle/input/wild-planet-trust-review-data/Paignton Reviews.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7359cdce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.055737Z",
     "iopub.status.busy": "2024-07-19T19:53:50.055354Z",
     "iopub.status.idle": "2024-07-19T19:53:50.076292Z",
     "shell.execute_reply": "2024-07-19T19:53:50.075379Z"
    },
    "papermill": {
     "duration": 0.036319,
     "end_time": "2024-07-19T19:53:50.078332",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.042013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_ID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Year_Month</th>\n",
       "      <th>Reviewer_Location</th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Branch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>670772142</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Australia</td>\n",
       "      <td>If you've ever been to Disneyland anywhere you...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>670682799</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-5</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>Its been a while since d last time we visit HK...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>670623270</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>Thanks God it wasn   t too hot or too humid wh...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>670607911</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Australia</td>\n",
       "      <td>HK Disneyland is a great compact park. Unfortu...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>670607296</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>the location is not in the city, took around 1...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Review_ID  Rating Year_Month     Reviewer_Location  \\\n",
       "0  670772142       4     2019-4             Australia   \n",
       "1  670682799       4     2019-5           Philippines   \n",
       "2  670623270       4     2019-4  United Arab Emirates   \n",
       "3  670607911       4     2019-4             Australia   \n",
       "4  670607296       4     2019-4        United Kingdom   \n",
       "\n",
       "                                         Review_Text               Branch  \n",
       "0  If you've ever been to Disneyland anywhere you...  Disneyland_HongKong  \n",
       "1  Its been a while since d last time we visit HK...  Disneyland_HongKong  \n",
       "2  Thanks God it wasn   t too hot or too humid wh...  Disneyland_HongKong  \n",
       "3  HK Disneyland is a great compact park. Unfortu...  Disneyland_HongKong  \n",
       "4  the location is not in the city, took around 1...  Disneyland_HongKong  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disney.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fad14ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.103549Z",
     "iopub.status.busy": "2024-07-19T19:53:50.102908Z",
     "iopub.status.idle": "2024-07-19T19:53:50.120951Z",
     "shell.execute_reply": "2024-07-19T19:53:50.120058Z"
    },
    "papermill": {
     "duration": 0.032725,
     "end_time": "2024-07-19T19:53:50.123153",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.090428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>If you've ever been to Disneyland anywhere you...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-5</td>\n",
       "      <td>Its been a while since d last time we visit HK...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Thanks God it wasn   t too hot or too humid wh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>HK Disneyland is a great compact park. Unfortu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>the location is not in the city, took around 1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating written_date                                             review\n",
       "0       4       2019-4  If you've ever been to Disneyland anywhere you...\n",
       "1       4       2019-5  Its been a while since d last time we visit HK...\n",
       "2       4       2019-4  Thanks God it wasn   t too hot or too humid wh...\n",
       "3       4       2019-4  HK Disneyland is a great compact park. Unfortu...\n",
       "4       4       2019-4  the location is not in the city, took around 1..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disney.drop(columns=['Review_ID', 'Branch', 'Reviewer_Location'], inplace=True)\n",
    "disney.rename(columns={'Year_Month': 'written_date', 'Review_Text': 'review', 'Rating': 'rating'}, inplace=True)\n",
    "disney.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b67e0f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.148531Z",
     "iopub.status.busy": "2024-07-19T19:53:50.147996Z",
     "iopub.status.idle": "2024-07-19T19:53:50.162900Z",
     "shell.execute_reply": "2024-07-19T19:53:50.161943Z"
    },
    "papermill": {
     "duration": 0.029982,
     "end_time": "2024-07-19T19:53:50.165340",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.135358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>title</th>\n",
       "      <th>review_text</th>\n",
       "      <th>branch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kelly B</td>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Universal is a complete Disaster - stick with ...</td>\n",
       "      <td>We went to Universal over Memorial Day weekend...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jon</td>\n",
       "      <td>1.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Food is hard to get.</td>\n",
       "      <td>The food service is horrible. I’m not reviewin...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nerdy P</td>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Disappointed</td>\n",
       "      <td>I booked this vacation mainly to ride Hagrid m...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ran101278</td>\n",
       "      <td>4.0</td>\n",
       "      <td>May 29, 2021</td>\n",
       "      <td>My opinion</td>\n",
       "      <td>When a person tries the test seat for the ride...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tammies20132015</td>\n",
       "      <td>5.0</td>\n",
       "      <td>May 28, 2021</td>\n",
       "      <td>The Bourne Stuntacular...MUST SEE</td>\n",
       "      <td>Ok, I can't stress enough to anyone and everyo...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          reviewer  rating  written_date  \\\n",
       "0          Kelly B     2.0  May 30, 2021   \n",
       "1              Jon     1.0  May 30, 2021   \n",
       "2          Nerdy P     2.0  May 30, 2021   \n",
       "3        ran101278     4.0  May 29, 2021   \n",
       "4  tammies20132015     5.0  May 28, 2021   \n",
       "\n",
       "                                               title  \\\n",
       "0  Universal is a complete Disaster - stick with ...   \n",
       "1                               Food is hard to get.   \n",
       "2                                       Disappointed   \n",
       "3                                         My opinion   \n",
       "4                  The Bourne Stuntacular...MUST SEE   \n",
       "\n",
       "                                         review_text  \\\n",
       "0  We went to Universal over Memorial Day weekend...   \n",
       "1  The food service is horrible. I’m not reviewin...   \n",
       "2  I booked this vacation mainly to ride Hagrid m...   \n",
       "3  When a person tries the test seat for the ride...   \n",
       "4  Ok, I can't stress enough to anyone and everyo...   \n",
       "\n",
       "                      branch  \n",
       "0  Universal Studios Florida  \n",
       "1  Universal Studios Florida  \n",
       "2  Universal Studios Florida  \n",
       "3  Universal Studios Florida  \n",
       "4  Universal Studios Florida  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "universal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd538d41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.193185Z",
     "iopub.status.busy": "2024-07-19T19:53:50.192848Z",
     "iopub.status.idle": "2024-07-19T19:53:50.255605Z",
     "shell.execute_reply": "2024-07-19T19:53:50.254551Z"
    },
    "papermill": {
     "duration": 0.079167,
     "end_time": "2024-07-19T19:53:50.257882",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.178715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Universal is a complete Disaster - stick with ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Food is hard to get. The food service is horri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Disappointed I booked this vacation mainly to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>May 29, 2021</td>\n",
       "      <td>My opinion When a person tries the test seat f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>May 28, 2021</td>\n",
       "      <td>The Bourne Stuntacular...MUST SEE Ok, I can't ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating  written_date                                             review\n",
       "0     2.0  May 30, 2021  Universal is a complete Disaster - stick with ...\n",
       "1     1.0  May 30, 2021  Food is hard to get. The food service is horri...\n",
       "2     2.0  May 30, 2021  Disappointed I booked this vacation mainly to ...\n",
       "3     4.0  May 29, 2021  My opinion When a person tries the test seat f...\n",
       "4     5.0  May 28, 2021  The Bourne Stuntacular...MUST SEE Ok, I can't ..."
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "universal['review'] = universal.title + \" \" + universal.review_text\n",
    "universal.drop(columns=['reviewer', 'branch', 'title', 'review_text'], inplace=True)\n",
    "universal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0a95ef93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.285320Z",
     "iopub.status.busy": "2024-07-19T19:53:50.284938Z",
     "iopub.status.idle": "2024-07-19T19:53:50.297621Z",
     "shell.execute_reply": "2024-07-19T19:53:50.296614Z"
    },
    "papermill": {
     "duration": 0.028843,
     "end_time": "2024-07-19T19:53:50.299708",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.270865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>comment</th>\n",
       "      <th>trip</th>\n",
       "      <th>writer</th>\n",
       "      <th>written</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Remarkable Repository of Culture</td>\n",
       "      <td>I was overwhelmed with this cornucopia of hist...</td>\n",
       "      <td>October 2020</td>\n",
       "      <td>paulyMaine</td>\n",
       "      <td>Jan 10</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Amazing Museum</td>\n",
       "      <td>British Museum always worth a visit no matter ...</td>\n",
       "      <td>February 2020</td>\n",
       "      <td>Tati_Luz</td>\n",
       "      <td>Jan 5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beautiful, must see museum!</td>\n",
       "      <td>I went before we had tier 4 in London and I fe...</td>\n",
       "      <td>November 2020</td>\n",
       "      <td>raynerjosephine</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Make sure you donate!</td>\n",
       "      <td>I only have good things to say about The Briti...</td>\n",
       "      <td>November 2020</td>\n",
       "      <td>Ipek</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Epic Museum with something for everyone</td>\n",
       "      <td>From the walk up to the building and then ente...</td>\n",
       "      <td>January 2020</td>\n",
       "      <td>Anthony G</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     title  \\\n",
       "0         Remarkable Repository of Culture   \n",
       "1                           Amazing Museum   \n",
       "2              Beautiful, must see museum!   \n",
       "3                    Make sure you donate!   \n",
       "4  Epic Museum with something for everyone   \n",
       "\n",
       "                                             comment           trip  \\\n",
       "0  I was overwhelmed with this cornucopia of hist...   October 2020   \n",
       "1  British Museum always worth a visit no matter ...  February 2020   \n",
       "2  I went before we had tier 4 in London and I fe...  November 2020   \n",
       "3  I only have good things to say about The Briti...  November 2020   \n",
       "4  From the walk up to the building and then ente...   January 2020   \n",
       "\n",
       "            writer   written  rating  \n",
       "0       paulyMaine    Jan 10       5  \n",
       "1         Tati_Luz     Jan 5       5  \n",
       "2  raynerjosephine  Dec 2020       5  \n",
       "3             Ipek  Dec 2020       5  \n",
       "4        Anthony G  Dec 2020       5  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "museum.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ebac0545",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.326359Z",
     "iopub.status.busy": "2024-07-19T19:53:50.326055Z",
     "iopub.status.idle": "2024-07-19T19:53:50.340267Z",
     "shell.execute_reply": "2024-07-19T19:53:50.339329Z"
    },
    "papermill": {
     "duration": 0.030134,
     "end_time": "2024-07-19T19:53:50.342683",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.312549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jan 10</td>\n",
       "      <td>5</td>\n",
       "      <td>Remarkable Repository of Culture I was overwhe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jan 5</td>\n",
       "      <td>5</td>\n",
       "      <td>Amazing Museum British Museum always worth a v...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Beautiful, must see museum! I went before we h...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Make sure you donate! I only have good things ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Epic Museum with something for everyone From t...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  written_date  rating                                             review\n",
       "0       Jan 10       5  Remarkable Repository of Culture I was overwhe...\n",
       "1        Jan 5       5  Amazing Museum British Museum always worth a v...\n",
       "2     Dec 2020       5  Beautiful, must see museum! I went before we h...\n",
       "3     Dec 2020       5  Make sure you donate! I only have good things ...\n",
       "4     Dec 2020       5  Epic Museum with something for everyone From t..."
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "museum['review'] = museum.title + \" \" + museum.comment\n",
    "museum.drop(columns=['title', 'comment', 'trip', 'writer'], inplace=True)\n",
    "museum.rename(columns={'written': 'written_date'}, inplace=True)\n",
    "museum.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "86ccb8fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.368594Z",
     "iopub.status.busy": "2024-07-19T19:53:50.368303Z",
     "iopub.status.idle": "2024-07-19T19:53:50.378996Z",
     "shell.execute_reply": "2024-07-19T19:53:50.378124Z"
    },
    "papermill": {
     "duration": 0.025908,
     "end_time": "2024-07-19T19:53:50.380982",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.355074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>review</th>\n",
       "      <th>review-date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alistair Peebles</td>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbie Mercer</td>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Elizabeth Wagner</td>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rebekah Tilbury</td>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>lewis taylor</td>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           reviewer                                             review  \\\n",
       "0  Alistair Peebles  Excellent small zoo and really good to explore...   \n",
       "1      Abbie Mercer  Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2  Elizabeth Wagner  What a lovely day out. Took my daughter and tw...   \n",
       "3   Rebekah Tilbury  A really good small zoo that takes around two ...   \n",
       "4      lewis taylor  Amazing little hidden gem of a zoo. Worth ever...   \n",
       "\n",
       "            review-date   rating  \n",
       "0  2024-07-05T19:52:02Z  5 stars  \n",
       "1  2024-07-05T19:52:02Z  5 stars  \n",
       "2  2024-07-05T19:52:02Z  5 stars  \n",
       "3  2024-07-05T19:52:02Z  5 stars  \n",
       "4  2024-07-05T19:52:02Z  5 stars  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5f44b7bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.407538Z",
     "iopub.status.busy": "2024-07-19T19:53:50.407257Z",
     "iopub.status.idle": "2024-07-19T19:53:50.419057Z",
     "shell.execute_reply": "2024-07-19T19:53:50.418212Z"
    },
    "papermill": {
     "duration": 0.027672,
     "end_time": "2024-07-19T19:53:50.421323",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.393651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review          written_date  \\\n",
       "0  Excellent small zoo and really good to explore...  2024-07-05T19:52:02Z   \n",
       "1  Lovely zoo easily accessed by bus or car. Grea...  2024-07-05T19:52:02Z   \n",
       "2  What a lovely day out. Took my daughter and tw...  2024-07-05T19:52:02Z   \n",
       "3  A really good small zoo that takes around two ...  2024-07-05T19:52:02Z   \n",
       "4  Amazing little hidden gem of a zoo. Worth ever...  2024-07-05T19:52:02Z   \n",
       "\n",
       "    rating  \n",
       "0  5 stars  \n",
       "1  5 stars  \n",
       "2  5 stars  \n",
       "3  5 stars  \n",
       "4  5 stars  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay.drop(columns=['reviewer'], inplace=True)\n",
    "newquay.rename(columns={'review-date': 'written_date'}, inplace=True)\n",
    "newquay.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "be541364",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.449447Z",
     "iopub.status.busy": "2024-07-19T19:53:50.448938Z",
     "iopub.status.idle": "2024-07-19T19:53:50.458316Z",
     "shell.execute_reply": "2024-07-19T19:53:50.457431Z"
    },
    "papermill": {
     "duration": 0.025085,
     "end_time": "2024-07-19T19:53:50.460432",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.435347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>stars</th>\n",
       "      <th>publishedAtDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T23:07:02.512Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T14:11:31.451Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>very lovely little zoo you can tell the animal...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-12T08:58:58.004Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>It's a smaller zoo than others, however a big ...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-10T16:27:15.393Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-09T22:59:52.276Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  stars  \\\n",
       "0                                                NaN      5   \n",
       "1                                                NaN      4   \n",
       "2  very lovely little zoo you can tell the animal...      5   \n",
       "3  It's a smaller zoo than others, however a big ...      5   \n",
       "4                                   Great experience      5   \n",
       "\n",
       "            publishedAtDate  \n",
       "0  2024-07-15T23:07:02.512Z  \n",
       "1  2024-07-15T14:11:31.451Z  \n",
       "2  2024-07-12T08:58:58.004Z  \n",
       "3  2024-07-10T16:27:15.393Z  \n",
       "4  2024-07-09T22:59:52.276Z  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b48ecab2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.489342Z",
     "iopub.status.busy": "2024-07-19T19:53:50.489031Z",
     "iopub.status.idle": "2024-07-19T19:53:50.499232Z",
     "shell.execute_reply": "2024-07-19T19:53:50.498415Z"
    },
    "papermill": {
     "duration": 0.02638,
     "end_time": "2024-07-19T19:53:50.501374",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.474994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T23:07:02.512Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T14:11:31.451Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>very lovely little zoo you can tell the animal...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-12T08:58:58.004Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>It's a smaller zoo than others, however a big ...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-10T16:27:15.393Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-09T22:59:52.276Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  rating  \\\n",
       "0                                                NaN       5   \n",
       "1                                                NaN       4   \n",
       "2  very lovely little zoo you can tell the animal...       5   \n",
       "3  It's a smaller zoo than others, however a big ...       5   \n",
       "4                                   Great experience       5   \n",
       "\n",
       "               written_date  \n",
       "0  2024-07-15T23:07:02.512Z  \n",
       "1  2024-07-15T14:11:31.451Z  \n",
       "2  2024-07-12T08:58:58.004Z  \n",
       "3  2024-07-10T16:27:15.393Z  \n",
       "4  2024-07-09T22:59:52.276Z  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay1.rename(columns={'text': 'review', 'stars':'rating', 'publishedAtDate': 'written_date'}, inplace=True)\n",
    "newquay1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "73ff5b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.532644Z",
     "iopub.status.busy": "2024-07-19T19:53:50.532316Z",
     "iopub.status.idle": "2024-07-19T19:53:50.550172Z",
     "shell.execute_reply": "2024-07-19T19:53:50.549250Z"
    },
    "papermill": {
     "duration": 0.035824,
     "end_time": "2024-07-19T19:53:50.552213",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.516389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2525</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-29T06:45:29.554Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2526</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T18:29:57.083Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2527</th>\n",
       "      <td>Loved it</td>\n",
       "      <td>2021-07-28T16:28:15.756Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2528</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T15:28:00.291Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2529</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T12:37:44.387Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2530 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Excellent small zoo and really good to explore...   \n",
       "1     Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2     What a lovely day out. Took my daughter and tw...   \n",
       "3     A really good small zoo that takes around two ...   \n",
       "4     Amazing little hidden gem of a zoo. Worth ever...   \n",
       "...                                                 ...   \n",
       "2525                                                NaN   \n",
       "2526                                                NaN   \n",
       "2527                                           Loved it   \n",
       "2528                                                NaN   \n",
       "2529                                                NaN   \n",
       "\n",
       "                  written_date  rating  \n",
       "0         2024-07-05T19:52:02Z     NaN  \n",
       "1         2024-07-05T19:52:02Z     NaN  \n",
       "2         2024-07-05T19:52:02Z     NaN  \n",
       "3         2024-07-05T19:52:02Z     NaN  \n",
       "4         2024-07-05T19:52:02Z     NaN  \n",
       "...                        ...     ...  \n",
       "2525  2021-07-29T06:45:29.554Z     4.0  \n",
       "2526  2021-07-28T18:29:57.083Z     3.0  \n",
       "2527  2021-07-28T16:28:15.756Z     5.0  \n",
       "2528  2021-07-28T15:28:00.291Z     5.0  \n",
       "2529  2021-07-28T12:37:44.387Z     5.0  \n",
       "\n",
       "[2530 rows x 3 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay = pd.concat([newquay, newquay1], ignore_index=True)\n",
    "newquay['rating'] = pd.to_numeric(newquay['rating'], errors='coerce')\n",
    "newquay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e933a85f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.582995Z",
     "iopub.status.busy": "2024-07-19T19:53:50.582018Z",
     "iopub.status.idle": "2024-07-19T19:53:50.602979Z",
     "shell.execute_reply": "2024-07-19T19:53:50.602009Z"
    },
    "papermill": {
     "duration": 0.039417,
     "end_time": "2024-07-19T19:53:50.605551",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.566134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2516</th>\n",
       "      <td>Lovely little zoo. So much to see and do consi...</td>\n",
       "      <td>2021-07-31T09:56:43.182Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2517</th>\n",
       "      <td>Free entry as a member of Chester Zoo, nice va...</td>\n",
       "      <td>2021-07-30T22:31:58.770Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>2nd time we've been looks run down not a lot t...</td>\n",
       "      <td>2021-07-30T10:01:24.572Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2523</th>\n",
       "      <td>Did not go there</td>\n",
       "      <td>2021-07-29T12:53:05.202Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2524</th>\n",
       "      <td>The zoo was run down overgrown with barely any...</td>\n",
       "      <td>2021-07-29T11:38:11.869Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1606 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Excellent small zoo and really good to explore...   \n",
       "1     Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2     What a lovely day out. Took my daughter and tw...   \n",
       "3     A really good small zoo that takes around two ...   \n",
       "4     Amazing little hidden gem of a zoo. Worth ever...   \n",
       "...                                                 ...   \n",
       "2516  Lovely little zoo. So much to see and do consi...   \n",
       "2517  Free entry as a member of Chester Zoo, nice va...   \n",
       "2520  2nd time we've been looks run down not a lot t...   \n",
       "2523                                   Did not go there   \n",
       "2524  The zoo was run down overgrown with barely any...   \n",
       "\n",
       "                  written_date  rating  \n",
       "0         2024-07-05T19:52:02Z     NaN  \n",
       "1         2024-07-05T19:52:02Z     NaN  \n",
       "2         2024-07-05T19:52:02Z     NaN  \n",
       "3         2024-07-05T19:52:02Z     NaN  \n",
       "4         2024-07-05T19:52:02Z     NaN  \n",
       "...                        ...     ...  \n",
       "2516  2021-07-31T09:56:43.182Z     5.0  \n",
       "2517  2021-07-30T22:31:58.770Z     3.0  \n",
       "2520  2021-07-30T10:01:24.572Z     1.0  \n",
       "2523  2021-07-29T12:53:05.202Z     1.0  \n",
       "2524  2021-07-29T11:38:11.869Z     1.0  \n",
       "\n",
       "[1606 rows x 3 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay = newquay.dropna(subset=['review'])\n",
    "newquay = newquay[newquay['review'] != '']\n",
    "newquay = newquay.drop_duplicates(subset=['review'])\n",
    "newquay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c5737f1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.636440Z",
     "iopub.status.busy": "2024-07-19T19:53:50.636157Z",
     "iopub.status.idle": "2024-07-19T19:53:50.647062Z",
     "shell.execute_reply": "2024-07-19T19:53:50.646143Z"
    },
    "papermill": {
     "duration": 0.028299,
     "end_time": "2024-07-19T19:53:50.649350",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.621051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>review</th>\n",
       "      <th>review-date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Saucy007</td>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Nathalie H</td>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Blingbailey</td>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Nicola S</td>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buddhika R</td>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      reviewer                                             review  \\\n",
       "0     Saucy007  Not for people with disabilities with walking....   \n",
       "1   Nathalie H  Hidden Gem To start with, the music as you wal...   \n",
       "2  Blingbailey  Great zoo and a great workout. I was hesitant ...   \n",
       "3     Nicola S  A fantastic day out for all ages!.. I absolute...   \n",
       "4   Buddhika R  No much animals The zoo is really nice and qui...   \n",
       "\n",
       "      review-date rating  \n",
       "0   July 10, 2024    NaN  \n",
       "1    July 8, 2024    NaN  \n",
       "2    July 7, 2024    NaN  \n",
       "3    July 6, 2024    NaN  \n",
       "4    July 5, 2024    NaN  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f8afa136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.682585Z",
     "iopub.status.busy": "2024-07-19T19:53:50.681777Z",
     "iopub.status.idle": "2024-07-19T19:53:50.694484Z",
     "shell.execute_reply": "2024-07-19T19:53:50.693455Z"
    },
    "papermill": {
     "duration": 0.030974,
     "end_time": "2024-07-19T19:53:50.696632",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.665658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review    written_date rating\n",
       "0  Not for people with disabilities with walking....   July 10, 2024    NaN\n",
       "1  Hidden Gem To start with, the music as you wal...    July 8, 2024    NaN\n",
       "2  Great zoo and a great workout. I was hesitant ...    July 7, 2024    NaN\n",
       "3  A fantastic day out for all ages!.. I absolute...    July 6, 2024    NaN\n",
       "4  No much animals The zoo is really nice and qui...    July 5, 2024    NaN"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton.drop(columns=['reviewer'], inplace=True)\n",
    "paignton.rename(columns={'review-date': 'written_date'}, inplace=True)\n",
    "paignton.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e9e6a886",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.728446Z",
     "iopub.status.busy": "2024-07-19T19:53:50.728141Z",
     "iopub.status.idle": "2024-07-19T19:53:50.738726Z",
     "shell.execute_reply": "2024-07-19T19:53:50.737800Z"
    },
    "papermill": {
     "duration": 0.028653,
     "end_time": "2024-07-19T19:53:50.740776",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.712123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>stars</th>\n",
       "      <th>publishedAtDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T17:24:18.135Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T16:34:57.082Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>We had a lovely family day out. We'll recommen...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T18:39:32.976Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Really enjoyed it, the only downside is it's i...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T16:53:29.993Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stunning place and loads to see. Thoroughly en...</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-14T15:15:59.959Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  stars  \\\n",
       "0                                                NaN      5   \n",
       "1                                                NaN      4   \n",
       "2  We had a lovely family day out. We'll recommen...      5   \n",
       "3  Really enjoyed it, the only downside is it's i...      5   \n",
       "4  Stunning place and loads to see. Thoroughly en...      4   \n",
       "\n",
       "            publishedAtDate  \n",
       "0  2024-07-15T17:24:18.135Z  \n",
       "1  2024-07-15T16:34:57.082Z  \n",
       "2  2024-07-14T18:39:32.976Z  \n",
       "3  2024-07-14T16:53:29.993Z  \n",
       "4  2024-07-14T15:15:59.959Z  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1f54a810",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.771737Z",
     "iopub.status.busy": "2024-07-19T19:53:50.771426Z",
     "iopub.status.idle": "2024-07-19T19:53:50.782025Z",
     "shell.execute_reply": "2024-07-19T19:53:50.781159Z"
    },
    "papermill": {
     "duration": 0.028453,
     "end_time": "2024-07-19T19:53:50.784208",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.755755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T17:24:18.135Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T16:34:57.082Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>We had a lovely family day out. We'll recommen...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T18:39:32.976Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Really enjoyed it, the only downside is it's i...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T16:53:29.993Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stunning place and loads to see. Thoroughly en...</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-14T15:15:59.959Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  rating  \\\n",
       "0                                                NaN       5   \n",
       "1                                                NaN       4   \n",
       "2  We had a lovely family day out. We'll recommen...       5   \n",
       "3  Really enjoyed it, the only downside is it's i...       5   \n",
       "4  Stunning place and loads to see. Thoroughly en...       4   \n",
       "\n",
       "               written_date  \n",
       "0  2024-07-15T17:24:18.135Z  \n",
       "1  2024-07-15T16:34:57.082Z  \n",
       "2  2024-07-14T18:39:32.976Z  \n",
       "3  2024-07-14T16:53:29.993Z  \n",
       "4  2024-07-14T15:15:59.959Z  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton1.rename(columns={'text': 'review', 'stars':'rating', 'publishedAtDate': 'written_date'}, inplace=True)\n",
    "paignton1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "68646426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.816032Z",
     "iopub.status.busy": "2024-07-19T19:53:50.815717Z",
     "iopub.status.idle": "2024-07-19T19:53:50.833617Z",
     "shell.execute_reply": "2024-07-19T19:53:50.832627Z"
    },
    "papermill": {
     "duration": 0.037229,
     "end_time": "2024-07-19T19:53:50.836544",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.799315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2815</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T16:55:52.070Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2816</th>\n",
       "      <td>It is a lovely zoo to walk around, be prepared...</td>\n",
       "      <td>2022-08-01T16:43:14.403Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2817</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T16:28:58.478Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2818</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T15:51:06.752Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>Beau, grand, cela permet de passer une agréabl...</td>\n",
       "      <td>2022-08-01T13:43:33.095Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2820 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Not for people with disabilities with walking....   \n",
       "1     Hidden Gem To start with, the music as you wal...   \n",
       "2     Great zoo and a great workout. I was hesitant ...   \n",
       "3     A fantastic day out for all ages!.. I absolute...   \n",
       "4     No much animals The zoo is really nice and qui...   \n",
       "...                                                 ...   \n",
       "2815                                                NaN   \n",
       "2816  It is a lovely zoo to walk around, be prepared...   \n",
       "2817                                                NaN   \n",
       "2818                                                NaN   \n",
       "2819  Beau, grand, cela permet de passer une agréabl...   \n",
       "\n",
       "                  written_date  rating  \n",
       "0                July 10, 2024     NaN  \n",
       "1                 July 8, 2024     NaN  \n",
       "2                 July 7, 2024     NaN  \n",
       "3                 July 6, 2024     NaN  \n",
       "4                 July 5, 2024     NaN  \n",
       "...                        ...     ...  \n",
       "2815  2022-08-01T16:55:52.070Z     5.0  \n",
       "2816  2022-08-01T16:43:14.403Z     4.0  \n",
       "2817  2022-08-01T16:28:58.478Z     5.0  \n",
       "2818  2022-08-01T15:51:06.752Z     3.0  \n",
       "2819  2022-08-01T13:43:33.095Z     4.0  \n",
       "\n",
       "[2820 rows x 3 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton = pd.concat([paignton, paignton1], ignore_index=True)\n",
    "paignton['rating'] = pd.to_numeric(paignton['rating'], errors='coerce')\n",
    "paignton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5bcf473b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.870637Z",
     "iopub.status.busy": "2024-07-19T19:53:50.870325Z",
     "iopub.status.idle": "2024-07-19T19:53:50.888986Z",
     "shell.execute_reply": "2024-07-19T19:53:50.888157Z"
    },
    "papermill": {
     "duration": 0.037336,
     "end_time": "2024-07-19T19:53:50.891077",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.853741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2810</th>\n",
       "      <td>An excellent zoo which wasn't too busy. We enj...</td>\n",
       "      <td>2022-08-02T16:04:34.509Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2812</th>\n",
       "      <td>A bit disappointing unfortunately. Lots of enc...</td>\n",
       "      <td>2022-08-02T07:43:39.577Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2813</th>\n",
       "      <td>Nice family day out. Plenty of monkeys. The go...</td>\n",
       "      <td>2022-08-01T19:03:56.649Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2814</th>\n",
       "      <td>Amazing a full day our 2 boys loved seeing the...</td>\n",
       "      <td>2022-08-01T17:57:16.637Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>Beau, grand, cela permet de passer une agréabl...</td>\n",
       "      <td>2022-08-01T13:43:33.095Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2063 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Not for people with disabilities with walking....   \n",
       "1     Hidden Gem To start with, the music as you wal...   \n",
       "2     Great zoo and a great workout. I was hesitant ...   \n",
       "3     A fantastic day out for all ages!.. I absolute...   \n",
       "4     No much animals The zoo is really nice and qui...   \n",
       "...                                                 ...   \n",
       "2810  An excellent zoo which wasn't too busy. We enj...   \n",
       "2812  A bit disappointing unfortunately. Lots of enc...   \n",
       "2813  Nice family day out. Plenty of monkeys. The go...   \n",
       "2814  Amazing a full day our 2 boys loved seeing the...   \n",
       "2819  Beau, grand, cela permet de passer une agréabl...   \n",
       "\n",
       "                  written_date  rating  \n",
       "0                July 10, 2024     NaN  \n",
       "1                 July 8, 2024     NaN  \n",
       "2                 July 7, 2024     NaN  \n",
       "3                 July 6, 2024     NaN  \n",
       "4                 July 5, 2024     NaN  \n",
       "...                        ...     ...  \n",
       "2810  2022-08-02T16:04:34.509Z     5.0  \n",
       "2812  2022-08-02T07:43:39.577Z     3.0  \n",
       "2813  2022-08-01T19:03:56.649Z     4.0  \n",
       "2814  2022-08-01T17:57:16.637Z     5.0  \n",
       "2819  2022-08-01T13:43:33.095Z     4.0  \n",
       "\n",
       "[2063 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton = paignton.dropna(subset=['review'])\n",
    "paignton = paignton[paignton['review'] != '']\n",
    "paignton = paignton.drop_duplicates(subset=['review'])\n",
    "paignton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a6c53c31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.924668Z",
     "iopub.status.busy": "2024-07-19T19:53:50.924093Z",
     "iopub.status.idle": "2024-07-19T19:53:50.930621Z",
     "shell.execute_reply": "2024-07-19T19:53:50.929666Z"
    },
    "papermill": {
     "duration": 0.025414,
     "end_time": "2024-07-19T19:53:50.932629",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.907215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add source column and preprocess text\n",
    "disney['source'] = 'disney'\n",
    "universal['source'] = 'universal'\n",
    "museum['source'] = 'museum'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1272cd60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:50.965484Z",
     "iopub.status.busy": "2024-07-19T19:53:50.964720Z",
     "iopub.status.idle": "2024-07-19T19:53:50.977526Z",
     "shell.execute_reply": "2024-07-19T19:53:50.976549Z"
    },
    "papermill": {
     "duration": 0.031557,
     "end_time": "2024-07-19T19:53:50.979690",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.948133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined_df = pd.concat([disney, universal, museum])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "02a63580",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T19:53:51.011922Z",
     "iopub.status.busy": "2024-07-19T19:53:51.011079Z",
     "iopub.status.idle": "2024-07-19T20:03:55.955018Z",
     "shell.execute_reply": "2024-07-19T20:03:55.954055Z"
    },
    "papermill": {
     "duration": 604.962671,
     "end_time": "2024-07-19T20:03:55.957653",
     "exception": false,
     "start_time": "2024-07-19T19:53:50.994982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "05ee38faf2964c6185eebac259ba5cc2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7087582f274e4bb8a13bbc20a8ed3644",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "78f9453385574050888916cb659ae49c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4118493854ab472fbf5a4ff8edce31b2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0ee3efb1fc07493b8e3ad44134db0a4a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load the FastText model from .vec file\n",
    "fasttext_model_path = '/kaggle/input/fasttext-crawl-300d-2m/crawl-300d-2M.vec'\n",
    "ft = KeyedVectors.load_word2vec_format(fasttext_model_path)\n",
    "\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "bert_model = BertModel.from_pretrained('bert-base-uncased')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0e136528",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T20:03:55.997301Z",
     "iopub.status.busy": "2024-07-19T20:03:55.996809Z",
     "iopub.status.idle": "2024-07-19T20:04:10.248240Z",
     "shell.execute_reply": "2024-07-19T20:04:10.247429Z"
    },
    "papermill": {
     "duration": 14.276752,
     "end_time": "2024-07-19T20:04:10.250731",
     "exception": false,
     "start_time": "2024-07-19T20:03:55.973979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# Download stopwords\n",
    "nltk.download('stopwords')\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def preprocess_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\s+', ' ', text).strip()\n",
    "    text = ' '.join([word for word in text.split() if word not in stop_words])\n",
    "    return text\n",
    "\n",
    "for df in [combined_df, paignton, newquay]:\n",
    "    df['cleaned_review'] = df['review'].apply(preprocess_text)\n",
    "    df['sentiment'] = df['rating'].apply(lambda x: 1 if x >= 4 else 0)\n",
    "\n",
    "# def get_embedding(text, ft_model):\n",
    "#     words = text.split()\n",
    "#     word_vecs = [ft_model[word] for word in words if word in ft_model]\n",
    "#     if word_vecs:\n",
    "#         return np.mean(word_vecs, axis=0)\n",
    "#     else:\n",
    "#         return np.zeros(ft_model.vector_size)\n",
    "    \n",
    "def get_bert_embedding(text, tokenizer, model):\n",
    "    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True)\n",
    "    outputs = model(**inputs)\n",
    "    last_hidden_states = outputs.last_hidden_state\n",
    "    return last_hidden_states.mean(dim=1).squeeze().detach().numpy()\n",
    "\n",
    "def get_fasttext_embedding(text, ft_model):\n",
    "    words = text.split()\n",
    "    word_vecs = [ft_model[word] for word in words if word in ft_model]\n",
    "    if word_vecs:\n",
    "        return np.mean(word_vecs, axis=0)\n",
    "    else:\n",
    "        return np.zeros(ft_model.vector_size)\n",
    "\n",
    "# # Preprocess reviews\n",
    "# def preprocess_reviews(df, ft_model):\n",
    "#     df['review_embedding'] = df['review'].apply(lambda x: get_embedding(str(x), ft_model))\n",
    "#     return df\n",
    "\n",
    "# Preprocess reviews\n",
    "def preprocess_reviews(df, ft_model, tokenizer, bert_model):\n",
    "    df['fasttext_embedding'] = df['cleaned_review'].apply(lambda x: get_fasttext_embedding(str(x), ft_model))\n",
    "    df['bert_embedding'] = df['cleaned_review'].apply(lambda x: get_bert_embedding(str(x), tokenizer, bert_model))\n",
    "    df['combined_embedding'] = df.apply(lambda row: np.concatenate((row['fasttext_embedding'], row['bert_embedding'])), axis=1)\n",
    "    return df\n",
    "\n",
    "# Extract features and labels\n",
    "def extract_features_labels(df):\n",
    "    X = np.stack(df['combined_embedding'].values)\n",
    "    y = df['sentiment'].values\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8cbcf7d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T20:04:10.334045Z",
     "iopub.status.busy": "2024-07-19T20:04:10.333689Z",
     "iopub.status.idle": "2024-07-19T23:28:48.349682Z",
     "shell.execute_reply": "2024-07-19T23:28:48.348714Z"
    },
    "papermill": {
     "duration": 12278.084072,
     "end_time": "2024-07-19T23:28:48.352751",
     "exception": false,
     "start_time": "2024-07-19T20:04:10.268679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined_df = preprocess_reviews(combined_df, ft, tokenizer, bert_model)\n",
    "paignton = preprocess_reviews(paignton, ft, tokenizer, bert_model)\n",
    "newquay = preprocess_reviews(newquay, ft, tokenizer, bert_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9a3bd0e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:48.388377Z",
     "iopub.status.busy": "2024-07-19T23:28:48.388001Z",
     "iopub.status.idle": "2024-07-19T23:28:48.674778Z",
     "shell.execute_reply": "2024-07-19T23:28:48.673869Z"
    },
    "papermill": {
     "duration": 0.306688,
     "end_time": "2024-07-19T23:28:48.677151",
     "exception": false,
     "start_time": "2024-07-19T23:28:48.370463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X, y = extract_features_labels(combined_df)\n",
    "X_paignton, y_paignton = extract_features_labels(paignton)\n",
    "X_newquay, y_newquay = extract_features_labels(newquay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "29eb1d04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:48.711874Z",
     "iopub.status.busy": "2024-07-19T23:28:48.711504Z",
     "iopub.status.idle": "2024-07-19T23:28:48.717990Z",
     "shell.execute_reply": "2024-07-19T23:28:48.717057Z"
    },
    "papermill": {
     "duration": 0.025814,
     "end_time": "2024-07-19T23:28:48.719970",
     "exception": false,
     "start_time": "2024-07-19T23:28:48.694156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a custom dataset class\n",
    "class ReviewDataset(Dataset):\n",
    "    def __init__(self, reviews, sentiments):\n",
    "        self.reviews = reviews\n",
    "        self.sentiments = sentiments\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.reviews)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return torch.tensor(self.reviews[idx], dtype=torch.float32), torch.tensor(self.sentiments[idx], dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6fdb2059",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:48.755516Z",
     "iopub.status.busy": "2024-07-19T23:28:48.755171Z",
     "iopub.status.idle": "2024-07-19T23:28:48.759943Z",
     "shell.execute_reply": "2024-07-19T23:28:48.759051Z"
    },
    "papermill": {
     "duration": 0.025534,
     "end_time": "2024-07-19T23:28:48.762208",
     "exception": false,
     "start_time": "2024-07-19T23:28:48.736674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined_dataset = ReviewDataset(X, y)\n",
    "paignton_dataset = ReviewDataset(X_paignton, y_paignton)\n",
    "newquay_dataset = ReviewDataset(X_newquay, y_newquay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e4d774a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:48.798906Z",
     "iopub.status.busy": "2024-07-19T23:28:48.798556Z",
     "iopub.status.idle": "2024-07-19T23:28:48.899477Z",
     "shell.execute_reply": "2024-07-19T23:28:48.898391Z"
    },
    "papermill": {
     "duration": 0.122222,
     "end_time": "2024-07-19T23:28:48.901966",
     "exception": false,
     "start_time": "2024-07-19T23:28:48.779744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate class weights\n",
    "class_sample_count = np.array([len(np.where(y == t)[0]) for t in np.unique(y)])\n",
    "class_weights = 1. / class_sample_count\n",
    "sample_class_weights = np.array([class_weights[t] for t in y])\n",
    "\n",
    "# Create dataset-specific weights\n",
    "dataset_weights = {\n",
    "    'disney': 0.4 / len(disney),\n",
    "    'universal': 0.4 / len(universal),\n",
    "    'museum': 0.2 / len(museum)\n",
    "}\n",
    "\n",
    "# Create a list to hold the dataset-specific weights for each sample\n",
    "sample_dataset_weights = []\n",
    "\n",
    "# Fill the dataset-specific weights\n",
    "for idx, source in enumerate(combined_df['source']):\n",
    "    sample_dataset_weights.append(dataset_weights[source])\n",
    "\n",
    "# Combine class weights and dataset weights\n",
    "combined_weights = sample_class_weights * sample_dataset_weights\n",
    "\n",
    "# Create WeightedRandomSampler\n",
    "sampler = WeightedRandomSampler(weights=combined_weights, num_samples=len(combined_weights), replacement=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4c8fb63d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:49.015449Z",
     "iopub.status.busy": "2024-07-19T23:28:49.015075Z",
     "iopub.status.idle": "2024-07-19T23:28:49.026772Z",
     "shell.execute_reply": "2024-07-19T23:28:49.025829Z"
    },
    "papermill": {
     "duration": 0.032335,
     "end_time": "2024-07-19T23:28:49.028981",
     "exception": false,
     "start_time": "2024-07-19T23:28:48.996646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the model\n",
    "class ANN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(ANN, self).__init__()\n",
    "        self.layer1 = nn.Linear(1068, 128)\n",
    "        self.gru = nn.GRU(128, 64, bidirectional=True, batch_first=True)\n",
    "        self.lstm = nn.LSTM(128, 64, bidirectional=True, batch_first=True)\n",
    "        self.layer2 = nn.Linear(256, 64)\n",
    "        self.layer3 = nn.Linear(64, 32)\n",
    "        self.layer4 = nn.Linear(32, 1)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.dropout = nn.Dropout(0.2)\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.relu(self.layer1(x))\n",
    "        x = self.dropout(x)\n",
    "        \n",
    "        # GRU layer\n",
    "        gru_out, _ = self.gru(x.unsqueeze(0))  # gru_out: [1, batch_size, 128]\n",
    "        gru_out = gru_out.squeeze(0)  # [batch_size, 128]\n",
    "        \n",
    "        # LSTM layer\n",
    "        lstm_out, _ = self.lstm(x.unsqueeze(0))  # lstm_out: [1, batch_size, 128]\n",
    "        lstm_out = lstm_out.squeeze(0)  # [batch_size, 128]\n",
    "        \n",
    "         # Concatenate GRU and LSTM outputs\n",
    "        combined_out = torch.cat((gru_out, lstm_out), dim=1)  # [batch_size, 256]\n",
    "\n",
    "        x = self.relu(self.layer2(combined_out))\n",
    "        x = self.dropout(x)\n",
    "        x = self.relu(self.layer3(x))\n",
    "        x = self.sigmoid(self.layer4(x))\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f690adc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:49.064172Z",
     "iopub.status.busy": "2024-07-19T23:28:49.063860Z",
     "iopub.status.idle": "2024-07-19T23:28:49.073826Z",
     "shell.execute_reply": "2024-07-19T23:28:49.072933Z"
    },
    "papermill": {
     "duration": 0.029738,
     "end_time": "2024-07-19T23:28:49.075900",
     "exception": false,
     "start_time": "2024-07-19T23:28:49.046162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function for training the model\n",
    "def train_model(model, criterion, optimizer, train_loader, val_loader, num_epochs=10, patience=3):\n",
    "    best_loss = float('inf')\n",
    "    patience_counter = 0\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        train_loss = 0.0\n",
    "        for reviews, sentiments in train_loader:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(reviews).squeeze()\n",
    "            loss = criterion(outputs, sentiments)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            train_loss += loss.item()\n",
    "        train_loss /= len(train_loader)\n",
    "\n",
    "        model.eval()\n",
    "        val_loss = 0.0\n",
    "        with torch.no_grad():\n",
    "            for reviews, sentiments in val_loader:\n",
    "                outputs = model(reviews).squeeze()\n",
    "                loss = criterion(outputs, sentiments)\n",
    "                val_loss += loss.item()\n",
    "        val_loss /= len(val_loader)\n",
    "\n",
    "        print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}')\n",
    "\n",
    "        if val_loss < best_loss:\n",
    "            best_loss = val_loss\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            if patience_counter >= patience:\n",
    "                print(\"Early stopping triggered.\")\n",
    "                break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1b956a02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T23:28:49.114332Z",
     "iopub.status.busy": "2024-07-19T23:28:49.113979Z",
     "iopub.status.idle": "2024-07-20T00:41:24.919083Z",
     "shell.execute_reply": "2024-07-20T00:41:24.917963Z"
    },
    "papermill": {
     "duration": 4355.848382,
     "end_time": "2024-07-20T00:41:24.943171",
     "exception": false,
     "start_time": "2024-07-19T23:28:49.094789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.4034, Val Loss: 0.3917\n",
      "Epoch 2/10, Train Loss: 0.3548, Val Loss: 0.4357\n",
      "Epoch 3/10, Train Loss: 0.3400, Val Loss: 0.3450\n",
      "Epoch 4/10, Train Loss: 0.3265, Val Loss: 0.4085\n",
      "Epoch 5/10, Train Loss: 0.3163, Val Loss: 0.4374\n",
      "Epoch 6/10, Train Loss: 0.3101, Val Loss: 0.3858\n",
      "Early stopping triggered.\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.3998, Val Loss: 0.3611\n",
      "Epoch 2/10, Train Loss: 0.3520, Val Loss: 0.4871\n",
      "Epoch 3/10, Train Loss: 0.3331, Val Loss: 0.4226\n",
      "Epoch 4/10, Train Loss: 0.3191, Val Loss: 0.4640\n",
      "Early stopping triggered.\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.4061, Val Loss: 0.4564\n",
      "Epoch 2/10, Train Loss: 0.3553, Val Loss: 0.3726\n",
      "Epoch 3/10, Train Loss: 0.3403, Val Loss: 0.3264\n",
      "Epoch 4/10, Train Loss: 0.3291, Val Loss: 0.3290\n",
      "Epoch 5/10, Train Loss: 0.3185, Val Loss: 0.3652\n",
      "Epoch 6/10, Train Loss: 0.3115, Val Loss: 0.2911\n",
      "Epoch 7/10, Train Loss: 0.3046, Val Loss: 0.2867\n",
      "Epoch 8/10, Train Loss: 0.3009, Val Loss: 0.3165\n",
      "Epoch 9/10, Train Loss: 0.2946, Val Loss: 0.3647\n",
      "Epoch 10/10, Train Loss: 0.2924, Val Loss: 0.2758\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.4016, Val Loss: 0.3853\n",
      "Epoch 2/10, Train Loss: 0.3496, Val Loss: 0.4209\n",
      "Epoch 3/10, Train Loss: 0.3320, Val Loss: 0.4063\n",
      "Epoch 4/10, Train Loss: 0.3158, Val Loss: 0.5492\n",
      "Early stopping triggered.\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.3995, Val Loss: 0.4195\n",
      "Epoch 2/10, Train Loss: 0.3543, Val Loss: 0.3473\n",
      "Epoch 3/10, Train Loss: 0.3371, Val Loss: 0.3490\n",
      "Epoch 4/10, Train Loss: 0.3240, Val Loss: 0.3798\n",
      "Epoch 5/10, Train Loss: 0.3154, Val Loss: 0.3209\n",
      "Epoch 6/10, Train Loss: 0.3062, Val Loss: 0.3553\n",
      "Epoch 7/10, Train Loss: 0.3005, Val Loss: 0.3476\n",
      "Epoch 8/10, Train Loss: 0.2965, Val Loss: 0.3247\n",
      "Early stopping triggered.\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.3989, Val Loss: 0.4019\n",
      "Epoch 2/10, Train Loss: 0.3575, Val Loss: 0.4159\n",
      "Epoch 3/10, Train Loss: 0.3335, Val Loss: 0.4144\n",
      "Epoch 4/10, Train Loss: 0.3231, Val Loss: 0.3582\n",
      "Epoch 5/10, Train Loss: 0.3126, Val Loss: 0.3334\n",
      "Epoch 6/10, Train Loss: 0.3051, Val Loss: 0.2881\n",
      "Epoch 7/10, Train Loss: 0.3027, Val Loss: 0.3226\n",
      "Epoch 8/10, Train Loss: 0.2971, Val Loss: 0.3374\n",
      "Epoch 9/10, Train Loss: 0.2918, Val Loss: 0.3042\n",
      "Early stopping triggered.\n",
      "Starting training for a new fold\n",
      "Epoch 1/10, Train Loss: 0.4012, Val Loss: 0.4350\n",
      "Epoch 2/10, Train Loss: 0.3551, Val Loss: 0.3935\n",
      "Epoch 3/10, Train Loss: 0.3343, Val Loss: 0.3425\n",
      "Epoch 4/10, Train Loss: 0.3247, Val Loss: 0.3844\n",
      "Epoch 5/10, Train Loss: 0.3171, Val Loss: 0.3138\n",
      "Epoch 6/10, Train Loss: 0.3091, Val Loss: 0.3545\n",
      "Epoch 7/10, Train Loss: 0.3037, Val Loss: 0.3736\n",
      "Epoch 8/10, Train Loss: 0.2994, Val Loss: 0.3630\n",
      "Early stopping triggered.\n"
     ]
    }
   ],
   "source": [
    "# Cross-validation\n",
    "kf = KFold(n_splits=7, shuffle=True, random_state=42)\n",
    "criterion = nn.BCELoss()\n",
    "\n",
    "# weight=class_weights[torch.tensor(y[train_index], dtype=torch.long)]\n",
    "\n",
    "for train_index, val_index in kf.split(combined_dataset):\n",
    "    train_sampler = torch.utils.data.SubsetRandomSampler(train_index)\n",
    "    val_sampler = torch.utils.data.SubsetRandomSampler(val_index)\n",
    "\n",
    "    train_loader = DataLoader(combined_dataset, batch_size=32, sampler=sampler)\n",
    "    val_loader = DataLoader(combined_dataset, batch_size=32, sampler=val_sampler)\n",
    "\n",
    "    model = ANN()\n",
    "    optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "    print(\"Starting training for a new fold\")\n",
    "    train_model(model, criterion, optimizer, train_loader, val_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a0f4c511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-20T00:41:24.984746Z",
     "iopub.status.busy": "2024-07-20T00:41:24.984427Z",
     "iopub.status.idle": "2024-07-20T00:41:24.991146Z",
     "shell.execute_reply": "2024-07-20T00:41:24.990250Z"
    },
    "papermill": {
     "duration": 0.029975,
     "end_time": "2024-07-20T00:41:24.993270",
     "exception": false,
     "start_time": "2024-07-20T00:41:24.963295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Evaluation on Paignton and Newquay datasets\n",
    "def evaluate(model, dataset):\n",
    "    loader = DataLoader(dataset, batch_size=32, shuffle=False)\n",
    "    model.eval()\n",
    "    predictions, actuals = [], []\n",
    "    with torch.no_grad():\n",
    "        for reviews, sentiments in loader:\n",
    "            outputs = model(reviews).squeeze()\n",
    "            predicted_labels = (outputs > 0.5).float()\n",
    "            predictions.extend(predicted_labels.numpy())\n",
    "            actuals.extend(sentiments.numpy())\n",
    "    return np.array(predictions), np.array(actuals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dd009a7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-20T00:41:25.037509Z",
     "iopub.status.busy": "2024-07-20T00:41:25.037212Z",
     "iopub.status.idle": "2024-07-20T00:56:02.083725Z",
     "shell.execute_reply": "2024-07-20T00:56:02.082692Z"
    },
    "papermill": {
     "duration": 877.093532,
     "end_time": "2024-07-20T00:56:02.108268",
     "exception": false,
     "start_time": "2024-07-20T00:41:25.014736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10, Train Loss: 0.3086, Val Loss: 0.2836\n",
      "Epoch 2/10, Train Loss: 0.2820, Val Loss: 0.2582\n",
      "Epoch 3/10, Train Loss: 0.2736, Val Loss: 0.2556\n",
      "Epoch 4/10, Train Loss: 0.2677, Val Loss: 0.2485\n",
      "Epoch 5/10, Train Loss: 0.2644, Val Loss: 0.2592\n",
      "Epoch 6/10, Train Loss: 0.2606, Val Loss: 0.2520\n",
      "Epoch 7/10, Train Loss: 0.2580, Val Loss: 0.2402\n",
      "Epoch 8/10, Train Loss: 0.2565, Val Loss: 0.2494\n",
      "Epoch 9/10, Train Loss: 0.2540, Val Loss: 0.2398\n",
      "Epoch 10/10, Train Loss: 0.2507, Val Loss: 0.2356\n"
     ]
    }
   ],
   "source": [
    "# Train final model on full training data\n",
    "combined_loader = DataLoader(combined_dataset, batch_size=32, shuffle=True)\n",
    "model = ANN()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "train_model(model, criterion, optimizer, combined_loader, val_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "65388500",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-20T00:56:02.153633Z",
     "iopub.status.busy": "2024-07-20T00:56:02.152940Z",
     "iopub.status.idle": "2024-07-20T00:56:02.801796Z",
     "shell.execute_reply": "2024-07-20T00:56:02.800832Z"
    },
    "papermill": {
     "duration": 0.673919,
     "end_time": "2024-07-20T00:56:02.804292",
     "exception": false,
     "start_time": "2024-07-20T00:56:02.130373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Evaluate on test datasets\n",
    "pred_paignton, actual_paignton = evaluate(model, paignton_dataset)\n",
    "pred_newquay, actual_newquay = evaluate(model, newquay_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d7979873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-20T00:56:02.848790Z",
     "iopub.status.busy": "2024-07-20T00:56:02.847916Z",
     "iopub.status.idle": "2024-07-20T00:56:02.878235Z",
     "shell.execute_reply": "2024-07-20T00:56:02.877270Z"
    },
    "papermill": {
     "duration": 0.054447,
     "end_time": "2024-07-20T00:56:02.880506",
     "exception": false,
     "start_time": "2024-07-20T00:56:02.826059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Paignton Confusion Matrix: [[433 712]\n",
      " [ 38 880]]\n",
      "Newquay Confusion Matrix: [[156 491]\n",
      " [ 46 913]]\n",
      "Paignton Accuracy: 0.6364517692680562\n",
      "Newquay Accuracy: 0.6656288916562889\n",
      "Paignton Precision: 0.5527638190954773\n",
      "Newquay Precision: 0.6502849002849003\n",
      "Paignton Recall: 0.9586056644880174\n",
      "Newquay Recall: 0.9520333680917622\n",
      "Paignton F1 Score: 0.7011952191235059\n",
      "Newquay F1 Score: 0.7727465086754125\n"
     ]
    }
   ],
   "source": [
    "# Calculate and print metrics\n",
    "\n",
    "conf_paignton = confusion_matrix(actual_paignton, pred_paignton)\n",
    "conf_newquay = confusion_matrix(actual_newquay, pred_newquay)\n",
    "\n",
    "accuracy_paignton = accuracy_score(actual_paignton, pred_paignton)\n",
    "accuracy_newquay = accuracy_score(actual_newquay, pred_newquay)\n",
    "\n",
    "precision_paignton = precision_score(actual_paignton, pred_paignton)\n",
    "precision_newquay = precision_score(actual_newquay, pred_newquay)\n",
    "\n",
    "recall_paignton = recall_score(actual_paignton, pred_paignton)\n",
    "recall_newquay = recall_score(actual_newquay, pred_newquay)\n",
    "\n",
    "f1_paignton = f1_score(actual_paignton, pred_paignton)\n",
    "f1_newquay = f1_score(actual_newquay, pred_newquay)\n",
    "\n",
    "print(\"Paignton Confusion Matrix:\", conf_paignton)\n",
    "print(\"Newquay Confusion Matrix:\", conf_newquay)\n",
    "\n",
    "print(\"Paignton Accuracy:\", accuracy_paignton)\n",
    "print(\"Newquay Accuracy:\", accuracy_newquay)\n",
    "\n",
    "print(\"Paignton Precision:\", precision_paignton)\n",
    "print(\"Newquay Precision:\", precision_newquay)\n",
    "\n",
    "print(\"Paignton Recall:\", recall_paignton)\n",
    "print(\"Newquay Recall:\", recall_newquay)\n",
    "\n",
    "print(\"Paignton F1 Score:\", f1_paignton)\n",
    "print(\"Newquay F1 Score:\", f1_newquay)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 14154,
     "sourceId": 19053,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1105807,
     "sourceId": 1858576,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1389694,
     "sourceId": 2304311,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2655259,
     "sourceId": 4547702,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5391899,
     "sourceId": 8970763,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18186.883196,
   "end_time": "2024-07-20T00:56:06.214078",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-19T19:52:59.330882",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "03a76263403e41edbc55a52c58bf0f1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "03c0989e499145f6b98a156c442735d4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "05ee38faf2964c6185eebac259ba5cc2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_09d777154b59480f80a0bbecf381e11e",
        "IPY_MODEL_e0239fee772f489db379bb8c9a4fde3c",
        "IPY_MODEL_69a84008f8f043978365b3bc3809e556"
       ],
       "layout": "IPY_MODEL_18d946d12cd645cc8aeb93e9e95bcee3"
      }
     },
     "09d777154b59480f80a0bbecf381e11e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_92eba1d83cbe48cdb88a52ce3f569c43",
       "placeholder": "​",
       "style": "IPY_MODEL_6639d1670ae949b7b22262020163c07f",
       "value": "tokenizer_config.json: 100%"
      }
     },
     "0d85138e47154281b5a5d6b3e0a75b2d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "0ee3efb1fc07493b8e3ad44134db0a4a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_46b0b48e38f544659d6e01b621ddb5fb",
        "IPY_MODEL_4847a8d610b6466e96a272f804105593",
        "IPY_MODEL_35a1bcaf2f5048d3b3457300908803c4"
       ],
       "layout": "IPY_MODEL_f4f3a93c9dd84c03ac1977771032ed1a"
      }
     },
     "18d946d12cd645cc8aeb93e9e95bcee3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22b6daa04f1d4a3d893357eb26034b20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "260b77bbc95e4b1eb1753699f3fc6fbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b6787602389341c39523e9b2a5d7c194",
       "placeholder": "​",
       "style": "IPY_MODEL_88ebeb0ef2d94daf8ab156a7d9b4a567",
       "value": " 466k/466k [00:00&lt;00:00, 15.9MB/s]"
      }
     },
     "316914c1287049afbdaca29c67b70756": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "35a1bcaf2f5048d3b3457300908803c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_88deade97f234333b2a4ee820b5faadb",
       "placeholder": "​",
       "style": "IPY_MODEL_41b498988172422f9b053cc1745a4b25",
       "value": " 440M/440M [00:02&lt;00:00, 211MB/s]"
      }
     },
     "378d26b84fb04d308e035537f8f22caa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4118493854ab472fbf5a4ff8edce31b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d35ece54a5e0458a93f142aaf5a4027f",
        "IPY_MODEL_876bd868b16a4b0c86d4342d47fb5eff",
        "IPY_MODEL_ce08b30ba26f47bb8f2e820909e4d585"
       ],
       "layout": "IPY_MODEL_a57459546b0045929f551147b4508e2a"
      }
     },
     "41b498988172422f9b053cc1745a4b25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "45cb54be127f4ab5b831bc5161d70f45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5eab5648d740461faf4bea4807299ecd",
       "max": 466062.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a41dee3443d04057abbb41eee7b1e402",
       "value": 466062.0
      }
     },
     "46b0b48e38f544659d6e01b621ddb5fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5f65f5b3b7bf4f0aa89f4b863002f287",
       "placeholder": "​",
       "style": "IPY_MODEL_9c61eeb4838e4560b70676cf2248a28c",
       "value": "model.safetensors: 100%"
      }
     },
     "4847a8d610b6466e96a272f804105593": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_51d6aa4854294811a4a70629013e6b03",
       "max": 440449768.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d4289532d1364beaabe9ad1a8fdb31df",
       "value": 440449768.0
      }
     },
     "51d6aa4854294811a4a70629013e6b03": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a8fc985cc2b4b8daf6915c4cc6d9be4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5eab5648d740461faf4bea4807299ecd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f65f5b3b7bf4f0aa89f4b863002f287": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6639d1670ae949b7b22262020163c07f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "670786b6842f4d09a8b1ccc3a701b403": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "69a84008f8f043978365b3bc3809e556": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_6ab72b8178fe4323aaeb24e55e3c50bd",
       "placeholder": "​",
       "style": "IPY_MODEL_03a76263403e41edbc55a52c58bf0f1a",
       "value": " 48.0/48.0 [00:00&lt;00:00, 3.11kB/s]"
      }
     },
     "6ab72b8178fe4323aaeb24e55e3c50bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7087582f274e4bb8a13bbc20a8ed3644": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_73184543b7d045a7bec4463e54e86f39",
        "IPY_MODEL_a111291d5f454d76ade24276361c49fa",
        "IPY_MODEL_b36ae3e2c8cb4f20a89bc6db777abfd7"
       ],
       "layout": "IPY_MODEL_378d26b84fb04d308e035537f8f22caa"
      }
     },
     "73184543b7d045a7bec4463e54e86f39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b6ccabbaca1e4f4080800ddc53c55b7c",
       "placeholder": "​",
       "style": "IPY_MODEL_8eed4a3f645b4ccdbb231f4f36606793",
       "value": "vocab.txt: 100%"
      }
     },
     "78f9453385574050888916cb659ae49c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b7954a04e9a7439a83477fef3ecdc2a3",
        "IPY_MODEL_45cb54be127f4ab5b831bc5161d70f45",
        "IPY_MODEL_260b77bbc95e4b1eb1753699f3fc6fbc"
       ],
       "layout": "IPY_MODEL_03c0989e499145f6b98a156c442735d4"
      }
     },
     "876bd868b16a4b0c86d4342d47fb5eff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d8b0722eb4a94ddfbe977ee4d396c9b9",
       "max": 570.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_316914c1287049afbdaca29c67b70756",
       "value": 570.0
      }
     },
     "88deade97f234333b2a4ee820b5faadb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "88ebeb0ef2d94daf8ab156a7d9b4a567": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8eed4a3f645b4ccdbb231f4f36606793": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "92eba1d83cbe48cdb88a52ce3f569c43": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9708cfbbf9f442dfaa304d36f70b4305": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9c61eeb4838e4560b70676cf2248a28c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "a111291d5f454d76ade24276361c49fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_f232f700d1a34f4b9ddadb00da1d8ba2",
       "max": 231508.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d6e280faa89c465a8019bf8384abb860",
       "value": 231508.0
      }
     },
     "a41dee3443d04057abbb41eee7b1e402": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a57459546b0045929f551147b4508e2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b36ae3e2c8cb4f20a89bc6db777abfd7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d9f2f2e6d4f949e79e18dd73418da792",
       "placeholder": "​",
       "style": "IPY_MODEL_0d85138e47154281b5a5d6b3e0a75b2d",
       "value": " 232k/232k [00:00&lt;00:00, 3.72MB/s]"
      }
     },
     "b6787602389341c39523e9b2a5d7c194": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b6ccabbaca1e4f4080800ddc53c55b7c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7954a04e9a7439a83477fef3ecdc2a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5a8fc985cc2b4b8daf6915c4cc6d9be4",
       "placeholder": "​",
       "style": "IPY_MODEL_22b6daa04f1d4a3d893357eb26034b20",
       "value": "tokenizer.json: 100%"
      }
     },
     "ce08b30ba26f47bb8f2e820909e4d585": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_eff15c117f67478f931985398dc64759",
       "placeholder": "​",
       "style": "IPY_MODEL_f3160ecc9f5e4fa3a30183839edc8db9",
       "value": " 570/570 [00:00&lt;00:00, 43.6kB/s]"
      }
     },
     "d35ece54a5e0458a93f142aaf5a4027f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e9e63152252948f09c4cace3b358b31e",
       "placeholder": "​",
       "style": "IPY_MODEL_f1225d8f830e443b997d377eede23b7e",
       "value": "config.json: 100%"
      }
     },
     "d4289532d1364beaabe9ad1a8fdb31df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d6e280faa89c465a8019bf8384abb860": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d8b0722eb4a94ddfbe977ee4d396c9b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d9f2f2e6d4f949e79e18dd73418da792": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0239fee772f489db379bb8c9a4fde3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9708cfbbf9f442dfaa304d36f70b4305",
       "max": 48.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_670786b6842f4d09a8b1ccc3a701b403",
       "value": 48.0
      }
     },
     "e9e63152252948f09c4cace3b358b31e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eff15c117f67478f931985398dc64759": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1225d8f830e443b997d377eede23b7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f232f700d1a34f4b9ddadb00da1d8ba2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f3160ecc9f5e4fa3a30183839edc8db9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f4f3a93c9dd84c03ac1977771032ed1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

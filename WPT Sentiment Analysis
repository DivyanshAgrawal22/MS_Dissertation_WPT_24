{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a0b8c8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:19:40.820736Z",
     "iopub.status.busy": "2024-07-16T23:19:40.819797Z",
     "iopub.status.idle": "2024-07-16T23:19:54.248884Z",
     "shell.execute_reply": "2024-07-16T23:19:54.247548Z"
    },
    "papermill": {
     "duration": 13.44381,
     "end_time": "2024-07-16T23:19:54.251512",
     "exception": false,
     "start_time": "2024-07-16T23:19:40.807702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.42.3)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.13.1)\r\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.23.4)\r\n",
      "Requirement already satisfied: numpy<2.0,>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.1)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.12.25)\r\n",
      "Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\r\n",
      "Requirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.3)\r\n",
      "Requirement already satisfied: tokenizers<0.20,>=0.19 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.19.1)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\r\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.5.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.9.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.7.4)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e90a147a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:19:54.273610Z",
     "iopub.status.busy": "2024-07-16T23:19:54.273204Z",
     "iopub.status.idle": "2024-07-16T23:20:25.760562Z",
     "shell.execute_reply": "2024-07-16T23:20:25.759558Z"
    },
    "papermill": {
     "duration": 31.501525,
     "end_time": "2024-07-16T23:20:25.763268",
     "exception": false,
     "start_time": "2024-07-16T23:19:54.261743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-16 23:20:13.812067: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-16 23:20:13.812210: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-16 23:20:13.976380: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.model_selection import train_test_split\n",
    "from gensim.models import FastText\n",
    "from transformers import BertTokenizer, TFBertModel, TFBertForSequenceClassification\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Input, Dense, Dropout, Concatenate, Embedding\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "import fasttext.util\n",
    "from gensim.models import KeyedVectors\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset, WeightedRandomSampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a4a0bf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:25.786386Z",
     "iopub.status.busy": "2024-07-16T23:20:25.785667Z",
     "iopub.status.idle": "2024-07-16T23:20:28.347105Z",
     "shell.execute_reply": "2024-07-16T23:20:28.346056Z"
    },
    "papermill": {
     "duration": 2.575808,
     "end_time": "2024-07-16T23:20:28.349807",
     "exception": false,
     "start_time": "2024-07-16T23:20:25.773999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "disney = pd.read_csv('/kaggle/input/disneyland-reviews/DisneylandReviews.csv', encoding='latin-1')\n",
    "universal = pd.read_csv('/kaggle/input/reviewuniversalstudio/universal_studio_branches.csv')\n",
    "museum = pd.read_csv('/kaggle/input/trip-advisor-review-british-museum-in-london/Data_Review_British_Museum.csv')\n",
    "\n",
    "newquay = pd.read_csv('/kaggle/input/wild-planet-trust-review-data/Newquay Reviews.csv')\n",
    "newquay1 = pd.read_excel('/kaggle/input/wild-planet-trust-review-data/Newquay Reviews.xlsx')\n",
    "\n",
    "paignton = pd.read_csv('/kaggle/input/wild-planet-trust-review-data/Paignton Reviews.csv')\n",
    "paignton1 = pd.read_excel('/kaggle/input/wild-planet-trust-review-data/Paignton Reviews.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d88bc658",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.372377Z",
     "iopub.status.busy": "2024-07-16T23:20:28.371971Z",
     "iopub.status.idle": "2024-07-16T23:20:28.394014Z",
     "shell.execute_reply": "2024-07-16T23:20:28.392935Z"
    },
    "papermill": {
     "duration": 0.035974,
     "end_time": "2024-07-16T23:20:28.396271",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.360297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_ID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Year_Month</th>\n",
       "      <th>Reviewer_Location</th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Branch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>670772142</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Australia</td>\n",
       "      <td>If you've ever been to Disneyland anywhere you...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>670682799</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-5</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>Its been a while since d last time we visit HK...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>670623270</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>Thanks God it wasn   t too hot or too humid wh...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>670607911</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Australia</td>\n",
       "      <td>HK Disneyland is a great compact park. Unfortu...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>670607296</td>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>the location is not in the city, took around 1...</td>\n",
       "      <td>Disneyland_HongKong</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Review_ID  Rating Year_Month     Reviewer_Location  \\\n",
       "0  670772142       4     2019-4             Australia   \n",
       "1  670682799       4     2019-5           Philippines   \n",
       "2  670623270       4     2019-4  United Arab Emirates   \n",
       "3  670607911       4     2019-4             Australia   \n",
       "4  670607296       4     2019-4        United Kingdom   \n",
       "\n",
       "                                         Review_Text               Branch  \n",
       "0  If you've ever been to Disneyland anywhere you...  Disneyland_HongKong  \n",
       "1  Its been a while since d last time we visit HK...  Disneyland_HongKong  \n",
       "2  Thanks God it wasn   t too hot or too humid wh...  Disneyland_HongKong  \n",
       "3  HK Disneyland is a great compact park. Unfortu...  Disneyland_HongKong  \n",
       "4  the location is not in the city, took around 1...  Disneyland_HongKong  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disney.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b98b2672",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.420287Z",
     "iopub.status.busy": "2024-07-16T23:20:28.419909Z",
     "iopub.status.idle": "2024-07-16T23:20:28.438570Z",
     "shell.execute_reply": "2024-07-16T23:20:28.437530Z"
    },
    "papermill": {
     "duration": 0.032789,
     "end_time": "2024-07-16T23:20:28.440721",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.407932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>If you've ever been to Disneyland anywhere you...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-5</td>\n",
       "      <td>Its been a while since d last time we visit HK...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>Thanks God it wasn   t too hot or too humid wh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>HK Disneyland is a great compact park. Unfortu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-4</td>\n",
       "      <td>the location is not in the city, took around 1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating written_date                                             review\n",
       "0       4       2019-4  If you've ever been to Disneyland anywhere you...\n",
       "1       4       2019-5  Its been a while since d last time we visit HK...\n",
       "2       4       2019-4  Thanks God it wasn   t too hot or too humid wh...\n",
       "3       4       2019-4  HK Disneyland is a great compact park. Unfortu...\n",
       "4       4       2019-4  the location is not in the city, took around 1..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disney.drop(columns=['Review_ID', 'Branch', 'Reviewer_Location'], inplace=True)\n",
    "disney.rename(columns={'Year_Month': 'written_date', 'Review_Text': 'review', 'Rating': 'rating'}, inplace=True)\n",
    "disney.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd201043",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.463719Z",
     "iopub.status.busy": "2024-07-16T23:20:28.463300Z",
     "iopub.status.idle": "2024-07-16T23:20:28.478598Z",
     "shell.execute_reply": "2024-07-16T23:20:28.477477Z"
    },
    "papermill": {
     "duration": 0.029403,
     "end_time": "2024-07-16T23:20:28.480713",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.451310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>title</th>\n",
       "      <th>review_text</th>\n",
       "      <th>branch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kelly B</td>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Universal is a complete Disaster - stick with ...</td>\n",
       "      <td>We went to Universal over Memorial Day weekend...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jon</td>\n",
       "      <td>1.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Food is hard to get.</td>\n",
       "      <td>The food service is horrible. I’m not reviewin...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nerdy P</td>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Disappointed</td>\n",
       "      <td>I booked this vacation mainly to ride Hagrid m...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ran101278</td>\n",
       "      <td>4.0</td>\n",
       "      <td>May 29, 2021</td>\n",
       "      <td>My opinion</td>\n",
       "      <td>When a person tries the test seat for the ride...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tammies20132015</td>\n",
       "      <td>5.0</td>\n",
       "      <td>May 28, 2021</td>\n",
       "      <td>The Bourne Stuntacular...MUST SEE</td>\n",
       "      <td>Ok, I can't stress enough to anyone and everyo...</td>\n",
       "      <td>Universal Studios Florida</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          reviewer  rating  written_date  \\\n",
       "0          Kelly B     2.0  May 30, 2021   \n",
       "1              Jon     1.0  May 30, 2021   \n",
       "2          Nerdy P     2.0  May 30, 2021   \n",
       "3        ran101278     4.0  May 29, 2021   \n",
       "4  tammies20132015     5.0  May 28, 2021   \n",
       "\n",
       "                                               title  \\\n",
       "0  Universal is a complete Disaster - stick with ...   \n",
       "1                               Food is hard to get.   \n",
       "2                                       Disappointed   \n",
       "3                                         My opinion   \n",
       "4                  The Bourne Stuntacular...MUST SEE   \n",
       "\n",
       "                                         review_text  \\\n",
       "0  We went to Universal over Memorial Day weekend...   \n",
       "1  The food service is horrible. I’m not reviewin...   \n",
       "2  I booked this vacation mainly to ride Hagrid m...   \n",
       "3  When a person tries the test seat for the ride...   \n",
       "4  Ok, I can't stress enough to anyone and everyo...   \n",
       "\n",
       "                      branch  \n",
       "0  Universal Studios Florida  \n",
       "1  Universal Studios Florida  \n",
       "2  Universal Studios Florida  \n",
       "3  Universal Studios Florida  \n",
       "4  Universal Studios Florida  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "universal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec10bbe1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.504106Z",
     "iopub.status.busy": "2024-07-16T23:20:28.503704Z",
     "iopub.status.idle": "2024-07-16T23:20:28.571925Z",
     "shell.execute_reply": "2024-07-16T23:20:28.570723Z"
    },
    "papermill": {
     "duration": 0.082513,
     "end_time": "2024-07-16T23:20:28.574200",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.491687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Universal is a complete Disaster - stick with ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Food is hard to get. The food service is horri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>Disappointed I booked this vacation mainly to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>May 29, 2021</td>\n",
       "      <td>My opinion When a person tries the test seat f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>May 28, 2021</td>\n",
       "      <td>The Bourne Stuntacular...MUST SEE Ok, I can't ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating  written_date                                             review\n",
       "0     2.0  May 30, 2021  Universal is a complete Disaster - stick with ...\n",
       "1     1.0  May 30, 2021  Food is hard to get. The food service is horri...\n",
       "2     2.0  May 30, 2021  Disappointed I booked this vacation mainly to ...\n",
       "3     4.0  May 29, 2021  My opinion When a person tries the test seat f...\n",
       "4     5.0  May 28, 2021  The Bourne Stuntacular...MUST SEE Ok, I can't ..."
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "universal['review'] = universal.title + \" \" + universal.review_text\n",
    "universal.drop(columns=['reviewer', 'branch', 'title', 'review_text'], inplace=True)\n",
    "universal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6d8d2ca4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.598573Z",
     "iopub.status.busy": "2024-07-16T23:20:28.597639Z",
     "iopub.status.idle": "2024-07-16T23:20:28.610139Z",
     "shell.execute_reply": "2024-07-16T23:20:28.609103Z"
    },
    "papermill": {
     "duration": 0.026894,
     "end_time": "2024-07-16T23:20:28.612210",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.585316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>comment</th>\n",
       "      <th>trip</th>\n",
       "      <th>writer</th>\n",
       "      <th>written</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Remarkable Repository of Culture</td>\n",
       "      <td>I was overwhelmed with this cornucopia of hist...</td>\n",
       "      <td>October 2020</td>\n",
       "      <td>paulyMaine</td>\n",
       "      <td>Jan 10</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Amazing Museum</td>\n",
       "      <td>British Museum always worth a visit no matter ...</td>\n",
       "      <td>February 2020</td>\n",
       "      <td>Tati_Luz</td>\n",
       "      <td>Jan 5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beautiful, must see museum!</td>\n",
       "      <td>I went before we had tier 4 in London and I fe...</td>\n",
       "      <td>November 2020</td>\n",
       "      <td>raynerjosephine</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Make sure you donate!</td>\n",
       "      <td>I only have good things to say about The Briti...</td>\n",
       "      <td>November 2020</td>\n",
       "      <td>Ipek</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Epic Museum with something for everyone</td>\n",
       "      <td>From the walk up to the building and then ente...</td>\n",
       "      <td>January 2020</td>\n",
       "      <td>Anthony G</td>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     title  \\\n",
       "0         Remarkable Repository of Culture   \n",
       "1                           Amazing Museum   \n",
       "2              Beautiful, must see museum!   \n",
       "3                    Make sure you donate!   \n",
       "4  Epic Museum with something for everyone   \n",
       "\n",
       "                                             comment           trip  \\\n",
       "0  I was overwhelmed with this cornucopia of hist...   October 2020   \n",
       "1  British Museum always worth a visit no matter ...  February 2020   \n",
       "2  I went before we had tier 4 in London and I fe...  November 2020   \n",
       "3  I only have good things to say about The Briti...  November 2020   \n",
       "4  From the walk up to the building and then ente...   January 2020   \n",
       "\n",
       "            writer   written  rating  \n",
       "0       paulyMaine    Jan 10       5  \n",
       "1         Tati_Luz     Jan 5       5  \n",
       "2  raynerjosephine  Dec 2020       5  \n",
       "3             Ipek  Dec 2020       5  \n",
       "4        Anthony G  Dec 2020       5  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "museum.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dcbb7f8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.637220Z",
     "iopub.status.busy": "2024-07-16T23:20:28.636252Z",
     "iopub.status.idle": "2024-07-16T23:20:28.653010Z",
     "shell.execute_reply": "2024-07-16T23:20:28.651851Z"
    },
    "papermill": {
     "duration": 0.032327,
     "end_time": "2024-07-16T23:20:28.656017",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.623690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jan 10</td>\n",
       "      <td>5</td>\n",
       "      <td>Remarkable Repository of Culture I was overwhe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jan 5</td>\n",
       "      <td>5</td>\n",
       "      <td>Amazing Museum British Museum always worth a v...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Beautiful, must see museum! I went before we h...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Make sure you donate! I only have good things ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dec 2020</td>\n",
       "      <td>5</td>\n",
       "      <td>Epic Museum with something for everyone From t...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  written_date  rating                                             review\n",
       "0       Jan 10       5  Remarkable Repository of Culture I was overwhe...\n",
       "1        Jan 5       5  Amazing Museum British Museum always worth a v...\n",
       "2     Dec 2020       5  Beautiful, must see museum! I went before we h...\n",
       "3     Dec 2020       5  Make sure you donate! I only have good things ...\n",
       "4     Dec 2020       5  Epic Museum with something for everyone From t..."
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "museum['review'] = museum.title + \" \" + museum.comment\n",
    "museum.drop(columns=['title', 'comment', 'trip', 'writer'], inplace=True)\n",
    "museum.rename(columns={'written': 'written_date'}, inplace=True)\n",
    "museum.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bf64272f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.681971Z",
     "iopub.status.busy": "2024-07-16T23:20:28.681510Z",
     "iopub.status.idle": "2024-07-16T23:20:28.693264Z",
     "shell.execute_reply": "2024-07-16T23:20:28.692138Z"
    },
    "papermill": {
     "duration": 0.026944,
     "end_time": "2024-07-16T23:20:28.695454",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.668510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>review</th>\n",
       "      <th>review-date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alistair Peebles</td>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbie Mercer</td>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Elizabeth Wagner</td>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rebekah Tilbury</td>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>lewis taylor</td>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           reviewer                                             review  \\\n",
       "0  Alistair Peebles  Excellent small zoo and really good to explore...   \n",
       "1      Abbie Mercer  Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2  Elizabeth Wagner  What a lovely day out. Took my daughter and tw...   \n",
       "3   Rebekah Tilbury  A really good small zoo that takes around two ...   \n",
       "4      lewis taylor  Amazing little hidden gem of a zoo. Worth ever...   \n",
       "\n",
       "            review-date   rating  \n",
       "0  2024-07-05T19:52:02Z  5 stars  \n",
       "1  2024-07-05T19:52:02Z  5 stars  \n",
       "2  2024-07-05T19:52:02Z  5 stars  \n",
       "3  2024-07-05T19:52:02Z  5 stars  \n",
       "4  2024-07-05T19:52:02Z  5 stars  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "af8271d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.720548Z",
     "iopub.status.busy": "2024-07-16T23:20:28.720136Z",
     "iopub.status.idle": "2024-07-16T23:20:28.732329Z",
     "shell.execute_reply": "2024-07-16T23:20:28.731134Z"
    },
    "papermill": {
     "duration": 0.027425,
     "end_time": "2024-07-16T23:20:28.734568",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.707143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>5 stars</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review          written_date  \\\n",
       "0  Excellent small zoo and really good to explore...  2024-07-05T19:52:02Z   \n",
       "1  Lovely zoo easily accessed by bus or car. Grea...  2024-07-05T19:52:02Z   \n",
       "2  What a lovely day out. Took my daughter and tw...  2024-07-05T19:52:02Z   \n",
       "3  A really good small zoo that takes around two ...  2024-07-05T19:52:02Z   \n",
       "4  Amazing little hidden gem of a zoo. Worth ever...  2024-07-05T19:52:02Z   \n",
       "\n",
       "    rating  \n",
       "0  5 stars  \n",
       "1  5 stars  \n",
       "2  5 stars  \n",
       "3  5 stars  \n",
       "4  5 stars  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay.drop(columns=['reviewer'], inplace=True)\n",
    "newquay.rename(columns={'review-date': 'written_date'}, inplace=True)\n",
    "newquay.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bae7c9fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.760374Z",
     "iopub.status.busy": "2024-07-16T23:20:28.759435Z",
     "iopub.status.idle": "2024-07-16T23:20:28.770003Z",
     "shell.execute_reply": "2024-07-16T23:20:28.768870Z"
    },
    "papermill": {
     "duration": 0.026217,
     "end_time": "2024-07-16T23:20:28.772740",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.746523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>stars</th>\n",
       "      <th>publishedAtDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T23:07:02.512Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T14:11:31.451Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>very lovely little zoo you can tell the animal...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-12T08:58:58.004Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>It's a smaller zoo than others, however a big ...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-10T16:27:15.393Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-09T22:59:52.276Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  stars  \\\n",
       "0                                                NaN      5   \n",
       "1                                                NaN      4   \n",
       "2  very lovely little zoo you can tell the animal...      5   \n",
       "3  It's a smaller zoo than others, however a big ...      5   \n",
       "4                                   Great experience      5   \n",
       "\n",
       "            publishedAtDate  \n",
       "0  2024-07-15T23:07:02.512Z  \n",
       "1  2024-07-15T14:11:31.451Z  \n",
       "2  2024-07-12T08:58:58.004Z  \n",
       "3  2024-07-10T16:27:15.393Z  \n",
       "4  2024-07-09T22:59:52.276Z  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11763791",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.800065Z",
     "iopub.status.busy": "2024-07-16T23:20:28.799666Z",
     "iopub.status.idle": "2024-07-16T23:20:28.811397Z",
     "shell.execute_reply": "2024-07-16T23:20:28.810196Z"
    },
    "papermill": {
     "duration": 0.028112,
     "end_time": "2024-07-16T23:20:28.813770",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.785658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T23:07:02.512Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T14:11:31.451Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>very lovely little zoo you can tell the animal...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-12T08:58:58.004Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>It's a smaller zoo than others, however a big ...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-10T16:27:15.393Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-09T22:59:52.276Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  rating  \\\n",
       "0                                                NaN       5   \n",
       "1                                                NaN       4   \n",
       "2  very lovely little zoo you can tell the animal...       5   \n",
       "3  It's a smaller zoo than others, however a big ...       5   \n",
       "4                                   Great experience       5   \n",
       "\n",
       "               written_date  \n",
       "0  2024-07-15T23:07:02.512Z  \n",
       "1  2024-07-15T14:11:31.451Z  \n",
       "2  2024-07-12T08:58:58.004Z  \n",
       "3  2024-07-10T16:27:15.393Z  \n",
       "4  2024-07-09T22:59:52.276Z  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay1.rename(columns={'text': 'review', 'stars':'rating', 'publishedAtDate': 'written_date'}, inplace=True)\n",
    "newquay1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5b2f4c61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.840911Z",
     "iopub.status.busy": "2024-07-16T23:20:28.839927Z",
     "iopub.status.idle": "2024-07-16T23:20:28.857312Z",
     "shell.execute_reply": "2024-07-16T23:20:28.856292Z"
    },
    "papermill": {
     "duration": 0.033282,
     "end_time": "2024-07-16T23:20:28.859435",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.826153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2525</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-29T06:45:29.554Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2526</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T18:29:57.083Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2527</th>\n",
       "      <td>Loved it</td>\n",
       "      <td>2021-07-28T16:28:15.756Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2528</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T15:28:00.291Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2529</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-07-28T12:37:44.387Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2530 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Excellent small zoo and really good to explore...   \n",
       "1     Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2     What a lovely day out. Took my daughter and tw...   \n",
       "3     A really good small zoo that takes around two ...   \n",
       "4     Amazing little hidden gem of a zoo. Worth ever...   \n",
       "...                                                 ...   \n",
       "2525                                                NaN   \n",
       "2526                                                NaN   \n",
       "2527                                           Loved it   \n",
       "2528                                                NaN   \n",
       "2529                                                NaN   \n",
       "\n",
       "                  written_date  rating  \n",
       "0         2024-07-05T19:52:02Z     NaN  \n",
       "1         2024-07-05T19:52:02Z     NaN  \n",
       "2         2024-07-05T19:52:02Z     NaN  \n",
       "3         2024-07-05T19:52:02Z     NaN  \n",
       "4         2024-07-05T19:52:02Z     NaN  \n",
       "...                        ...     ...  \n",
       "2525  2021-07-29T06:45:29.554Z     4.0  \n",
       "2526  2021-07-28T18:29:57.083Z     3.0  \n",
       "2527  2021-07-28T16:28:15.756Z     5.0  \n",
       "2528  2021-07-28T15:28:00.291Z     5.0  \n",
       "2529  2021-07-28T12:37:44.387Z     5.0  \n",
       "\n",
       "[2530 rows x 3 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay = pd.concat([newquay, newquay1], ignore_index=True)\n",
    "newquay['rating'] = pd.to_numeric(newquay['rating'], errors='coerce')\n",
    "newquay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "12e5a9b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.886645Z",
     "iopub.status.busy": "2024-07-16T23:20:28.886205Z",
     "iopub.status.idle": "2024-07-16T23:20:28.903898Z",
     "shell.execute_reply": "2024-07-16T23:20:28.902626Z"
    },
    "papermill": {
     "duration": 0.033939,
     "end_time": "2024-07-16T23:20:28.906259",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.872320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Excellent small zoo and really good to explore...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lovely zoo easily accessed by bus or car. Grea...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>What a lovely day out. Took my daughter and tw...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A really good small zoo that takes around two ...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazing little hidden gem of a zoo. Worth ever...</td>\n",
       "      <td>2024-07-05T19:52:02Z</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2517</th>\n",
       "      <td>Free entry as a member of Chester Zoo, nice va...</td>\n",
       "      <td>2021-07-30T22:31:58.770Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>2nd time we've been looks run down not a lot t...</td>\n",
       "      <td>2021-07-30T10:01:24.572Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2523</th>\n",
       "      <td>Did not go there</td>\n",
       "      <td>2021-07-29T12:53:05.202Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2524</th>\n",
       "      <td>The zoo was run down overgrown with barely any...</td>\n",
       "      <td>2021-07-29T11:38:11.869Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2527</th>\n",
       "      <td>Loved it</td>\n",
       "      <td>2021-07-28T16:28:15.756Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1669 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Excellent small zoo and really good to explore...   \n",
       "1     Lovely zoo easily accessed by bus or car. Grea...   \n",
       "2     What a lovely day out. Took my daughter and tw...   \n",
       "3     A really good small zoo that takes around two ...   \n",
       "4     Amazing little hidden gem of a zoo. Worth ever...   \n",
       "...                                                 ...   \n",
       "2517  Free entry as a member of Chester Zoo, nice va...   \n",
       "2520  2nd time we've been looks run down not a lot t...   \n",
       "2523                                   Did not go there   \n",
       "2524  The zoo was run down overgrown with barely any...   \n",
       "2527                                           Loved it   \n",
       "\n",
       "                  written_date  rating  \n",
       "0         2024-07-05T19:52:02Z     NaN  \n",
       "1         2024-07-05T19:52:02Z     NaN  \n",
       "2         2024-07-05T19:52:02Z     NaN  \n",
       "3         2024-07-05T19:52:02Z     NaN  \n",
       "4         2024-07-05T19:52:02Z     NaN  \n",
       "...                        ...     ...  \n",
       "2517  2021-07-30T22:31:58.770Z     3.0  \n",
       "2520  2021-07-30T10:01:24.572Z     1.0  \n",
       "2523  2021-07-29T12:53:05.202Z     1.0  \n",
       "2524  2021-07-29T11:38:11.869Z     1.0  \n",
       "2527  2021-07-28T16:28:15.756Z     5.0  \n",
       "\n",
       "[1669 rows x 3 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newquay = newquay.dropna(subset=['review'])\n",
    "newquay = newquay[newquay['review'] != '']\n",
    "newquay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e4ed8621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.935192Z",
     "iopub.status.busy": "2024-07-16T23:20:28.934814Z",
     "iopub.status.idle": "2024-07-16T23:20:28.947110Z",
     "shell.execute_reply": "2024-07-16T23:20:28.945890Z"
    },
    "papermill": {
     "duration": 0.029798,
     "end_time": "2024-07-16T23:20:28.949454",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.919656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewer</th>\n",
       "      <th>review</th>\n",
       "      <th>review-date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Saucy007</td>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Nathalie H</td>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Blingbailey</td>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Nicola S</td>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buddhika R</td>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      reviewer                                             review  \\\n",
       "0     Saucy007  Not for people with disabilities with walking....   \n",
       "1   Nathalie H  Hidden Gem To start with, the music as you wal...   \n",
       "2  Blingbailey  Great zoo and a great workout. I was hesitant ...   \n",
       "3     Nicola S  A fantastic day out for all ages!.. I absolute...   \n",
       "4   Buddhika R  No much animals The zoo is really nice and qui...   \n",
       "\n",
       "      review-date rating  \n",
       "0   July 10, 2024    NaN  \n",
       "1    July 8, 2024    NaN  \n",
       "2    July 7, 2024    NaN  \n",
       "3    July 6, 2024    NaN  \n",
       "4    July 5, 2024    NaN  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a909663d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:28.977321Z",
     "iopub.status.busy": "2024-07-16T23:20:28.976928Z",
     "iopub.status.idle": "2024-07-16T23:20:28.989320Z",
     "shell.execute_reply": "2024-07-16T23:20:28.988269Z"
    },
    "papermill": {
     "duration": 0.028989,
     "end_time": "2024-07-16T23:20:28.991457",
     "exception": false,
     "start_time": "2024-07-16T23:20:28.962468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review    written_date rating\n",
       "0  Not for people with disabilities with walking....   July 10, 2024    NaN\n",
       "1  Hidden Gem To start with, the music as you wal...    July 8, 2024    NaN\n",
       "2  Great zoo and a great workout. I was hesitant ...    July 7, 2024    NaN\n",
       "3  A fantastic day out for all ages!.. I absolute...    July 6, 2024    NaN\n",
       "4  No much animals The zoo is really nice and qui...    July 5, 2024    NaN"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton.drop(columns=['reviewer'], inplace=True)\n",
    "paignton.rename(columns={'review-date': 'written_date'}, inplace=True)\n",
    "paignton.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "185b6d25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.019587Z",
     "iopub.status.busy": "2024-07-16T23:20:29.019170Z",
     "iopub.status.idle": "2024-07-16T23:20:29.029476Z",
     "shell.execute_reply": "2024-07-16T23:20:29.028523Z"
    },
    "papermill": {
     "duration": 0.026942,
     "end_time": "2024-07-16T23:20:29.031650",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.004708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>stars</th>\n",
       "      <th>publishedAtDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T17:24:18.135Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T16:34:57.082Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>We had a lovely family day out. We'll recommen...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T18:39:32.976Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Really enjoyed it, the only downside is it's i...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T16:53:29.993Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stunning place and loads to see. Thoroughly en...</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-14T15:15:59.959Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  stars  \\\n",
       "0                                                NaN      5   \n",
       "1                                                NaN      4   \n",
       "2  We had a lovely family day out. We'll recommen...      5   \n",
       "3  Really enjoyed it, the only downside is it's i...      5   \n",
       "4  Stunning place and loads to see. Thoroughly en...      4   \n",
       "\n",
       "            publishedAtDate  \n",
       "0  2024-07-15T17:24:18.135Z  \n",
       "1  2024-07-15T16:34:57.082Z  \n",
       "2  2024-07-14T18:39:32.976Z  \n",
       "3  2024-07-14T16:53:29.993Z  \n",
       "4  2024-07-14T15:15:59.959Z  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d76e0ef7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.060547Z",
     "iopub.status.busy": "2024-07-16T23:20:29.060162Z",
     "iopub.status.idle": "2024-07-16T23:20:29.071133Z",
     "shell.execute_reply": "2024-07-16T23:20:29.070134Z"
    },
    "papermill": {
     "duration": 0.027755,
     "end_time": "2024-07-16T23:20:29.073225",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.045470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>rating</th>\n",
       "      <th>written_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-15T17:24:18.135Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-15T16:34:57.082Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>We had a lovely family day out. We'll recommen...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T18:39:32.976Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Really enjoyed it, the only downside is it's i...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-07-14T16:53:29.993Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stunning place and loads to see. Thoroughly en...</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-07-14T15:15:59.959Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  rating  \\\n",
       "0                                                NaN       5   \n",
       "1                                                NaN       4   \n",
       "2  We had a lovely family day out. We'll recommen...       5   \n",
       "3  Really enjoyed it, the only downside is it's i...       5   \n",
       "4  Stunning place and loads to see. Thoroughly en...       4   \n",
       "\n",
       "               written_date  \n",
       "0  2024-07-15T17:24:18.135Z  \n",
       "1  2024-07-15T16:34:57.082Z  \n",
       "2  2024-07-14T18:39:32.976Z  \n",
       "3  2024-07-14T16:53:29.993Z  \n",
       "4  2024-07-14T15:15:59.959Z  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton1.rename(columns={'text': 'review', 'stars':'rating', 'publishedAtDate': 'written_date'}, inplace=True)\n",
    "paignton1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e7ae4076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.102320Z",
     "iopub.status.busy": "2024-07-16T23:20:29.101618Z",
     "iopub.status.idle": "2024-07-16T23:20:29.118033Z",
     "shell.execute_reply": "2024-07-16T23:20:29.116967Z"
    },
    "papermill": {
     "duration": 0.033181,
     "end_time": "2024-07-16T23:20:29.120081",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.086900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2815</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T16:55:52.070Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2816</th>\n",
       "      <td>It is a lovely zoo to walk around, be prepared...</td>\n",
       "      <td>2022-08-01T16:43:14.403Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2817</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T16:28:58.478Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2818</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2022-08-01T15:51:06.752Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>Beau, grand, cela permet de passer une agréabl...</td>\n",
       "      <td>2022-08-01T13:43:33.095Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2820 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Not for people with disabilities with walking....   \n",
       "1     Hidden Gem To start with, the music as you wal...   \n",
       "2     Great zoo and a great workout. I was hesitant ...   \n",
       "3     A fantastic day out for all ages!.. I absolute...   \n",
       "4     No much animals The zoo is really nice and qui...   \n",
       "...                                                 ...   \n",
       "2815                                                NaN   \n",
       "2816  It is a lovely zoo to walk around, be prepared...   \n",
       "2817                                                NaN   \n",
       "2818                                                NaN   \n",
       "2819  Beau, grand, cela permet de passer une agréabl...   \n",
       "\n",
       "                  written_date  rating  \n",
       "0                July 10, 2024     NaN  \n",
       "1                 July 8, 2024     NaN  \n",
       "2                 July 7, 2024     NaN  \n",
       "3                 July 6, 2024     NaN  \n",
       "4                 July 5, 2024     NaN  \n",
       "...                        ...     ...  \n",
       "2815  2022-08-01T16:55:52.070Z     5.0  \n",
       "2816  2022-08-01T16:43:14.403Z     4.0  \n",
       "2817  2022-08-01T16:28:58.478Z     5.0  \n",
       "2818  2022-08-01T15:51:06.752Z     3.0  \n",
       "2819  2022-08-01T13:43:33.095Z     4.0  \n",
       "\n",
       "[2820 rows x 3 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton = pd.concat([paignton, paignton1], ignore_index=True)\n",
    "paignton['rating'] = pd.to_numeric(paignton['rating'], errors='coerce')\n",
    "paignton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5a15594a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.149384Z",
     "iopub.status.busy": "2024-07-16T23:20:29.148995Z",
     "iopub.status.idle": "2024-07-16T23:20:29.165562Z",
     "shell.execute_reply": "2024-07-16T23:20:29.164579Z"
    },
    "papermill": {
     "duration": 0.033812,
     "end_time": "2024-07-16T23:20:29.167733",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.133921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>written_date</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Not for people with disabilities with walking....</td>\n",
       "      <td>July 10, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hidden Gem To start with, the music as you wal...</td>\n",
       "      <td>July 8, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great zoo and a great workout. I was hesitant ...</td>\n",
       "      <td>July 7, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A fantastic day out for all ages!.. I absolute...</td>\n",
       "      <td>July 6, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No much animals The zoo is really nice and qui...</td>\n",
       "      <td>July 5, 2024</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2812</th>\n",
       "      <td>A bit disappointing unfortunately. Lots of enc...</td>\n",
       "      <td>2022-08-02T07:43:39.577Z</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2813</th>\n",
       "      <td>Nice family day out. Plenty of monkeys. The go...</td>\n",
       "      <td>2022-08-01T19:03:56.649Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2814</th>\n",
       "      <td>Amazing a full day our 2 boys loved seeing the...</td>\n",
       "      <td>2022-08-01T17:57:16.637Z</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2816</th>\n",
       "      <td>It is a lovely zoo to walk around, be prepared...</td>\n",
       "      <td>2022-08-01T16:43:14.403Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>Beau, grand, cela permet de passer une agréabl...</td>\n",
       "      <td>2022-08-01T13:43:33.095Z</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2102 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 review  \\\n",
       "0     Not for people with disabilities with walking....   \n",
       "1     Hidden Gem To start with, the music as you wal...   \n",
       "2     Great zoo and a great workout. I was hesitant ...   \n",
       "3     A fantastic day out for all ages!.. I absolute...   \n",
       "4     No much animals The zoo is really nice and qui...   \n",
       "...                                                 ...   \n",
       "2812  A bit disappointing unfortunately. Lots of enc...   \n",
       "2813  Nice family day out. Plenty of monkeys. The go...   \n",
       "2814  Amazing a full day our 2 boys loved seeing the...   \n",
       "2816  It is a lovely zoo to walk around, be prepared...   \n",
       "2819  Beau, grand, cela permet de passer une agréabl...   \n",
       "\n",
       "                  written_date  rating  \n",
       "0                July 10, 2024     NaN  \n",
       "1                 July 8, 2024     NaN  \n",
       "2                 July 7, 2024     NaN  \n",
       "3                 July 6, 2024     NaN  \n",
       "4                 July 5, 2024     NaN  \n",
       "...                        ...     ...  \n",
       "2812  2022-08-02T07:43:39.577Z     3.0  \n",
       "2813  2022-08-01T19:03:56.649Z     4.0  \n",
       "2814  2022-08-01T17:57:16.637Z     5.0  \n",
       "2816  2022-08-01T16:43:14.403Z     4.0  \n",
       "2819  2022-08-01T13:43:33.095Z     4.0  \n",
       "\n",
       "[2102 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paignton = paignton.dropna(subset=['review'])\n",
    "paignton = paignton[paignton['review'] != '']\n",
    "paignton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "43afb524",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.197411Z",
     "iopub.status.busy": "2024-07-16T23:20:29.196995Z",
     "iopub.status.idle": "2024-07-16T23:20:29.201602Z",
     "shell.execute_reply": "2024-07-16T23:20:29.200477Z"
    },
    "papermill": {
     "duration": 0.022085,
     "end_time": "2024-07-16T23:20:29.203830",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.181745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # FastText embeddings\n",
    "# fasttext.util.download_model('en', if_exists='ignore')\n",
    "# ft = fasttext.load_model('cc.en.300.bin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "42174305",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:20:29.234151Z",
     "iopub.status.busy": "2024-07-16T23:20:29.233755Z",
     "iopub.status.idle": "2024-07-16T23:27:42.511472Z",
     "shell.execute_reply": "2024-07-16T23:27:42.510330Z"
    },
    "papermill": {
     "duration": 433.295924,
     "end_time": "2024-07-16T23:27:42.514307",
     "exception": false,
     "start_time": "2024-07-16T23:20:29.218383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the FastText model from .vec file\n",
    "fasttext_model_path = '/kaggle/input/fasttext-crawl-300d-2m/crawl-300d-2M.vec'\n",
    "ft = KeyedVectors.load_word2vec_format(fasttext_model_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0c102ff3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:27:42.545039Z",
     "iopub.status.busy": "2024-07-16T23:27:42.544626Z",
     "iopub.status.idle": "2024-07-16T23:27:52.569852Z",
     "shell.execute_reply": "2024-07-16T23:27:52.568734Z"
    },
    "papermill": {
     "duration": 10.04343,
     "end_time": "2024-07-16T23:27:52.572370",
     "exception": false,
     "start_time": "2024-07-16T23:27:42.528940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# Download stopwords\n",
    "nltk.download('stopwords')\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def preprocess_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\s+', ' ', text).strip()\n",
    "    text = ' '.join([word for word in text.split() if word not in stop_words])\n",
    "    return text\n",
    "\n",
    "for df in [disney, universal, museum, paignton, newquay]:\n",
    "    df['cleaned_review'] = df['review'].apply(preprocess_text)\n",
    "    df['sentiment'] = df['rating'].apply(lambda x: 1 if x >= 4 else 0)\n",
    "    \n",
    "# def get_embedding(text, ft_model):\n",
    "#     words = text.split()\n",
    "#     word_vecs = [ft_model.get_word_vector(word) for word in words]\n",
    "#     return np.mean(word_vecs, axis=0)\n",
    "\n",
    "def get_embedding(text, ft_model):\n",
    "    words = text.split()\n",
    "    word_vecs = [ft_model[word] for word in words if word in ft_model]\n",
    "    if word_vecs:\n",
    "        return np.mean(word_vecs, axis=0)\n",
    "    else:\n",
    "        return np.zeros(ft_model.vector_size)\n",
    "\n",
    "# Preprocess reviews\n",
    "def preprocess_reviews(df, ft_model):\n",
    "    df['review_embedding'] = df['review'].apply(lambda x: get_embedding(str(x), ft_model))\n",
    "    return df\n",
    "\n",
    "# Extract features and labels\n",
    "def extract_features_labels(df):\n",
    "    X = np.stack(df['review_embedding'].values)\n",
    "    y = df['sentiment'].values\n",
    "    return X, y\n",
    "\n",
    "# # Split datasets into train and test sets\n",
    "# def split_data(df):\n",
    "#     X_train, X_test, y_train, y_test = train_test_split(df['cleaned_review'], df['sentiment'], test_size=0.2, random_state=42)\n",
    "#     return X_train, X_test, y_train, y_test\n",
    "\n",
    "# X_train1, X_test1, y_train1, y_test1 = split_data(disney)\n",
    "# X_train2, X_test2, y_train2, y_test2 = split_data(universal)\n",
    "# X_train3, X_test3, y_train3, y_test3 = split_data(museum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "350536ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:27:52.603714Z",
     "iopub.status.busy": "2024-07-16T23:27:52.603324Z",
     "iopub.status.idle": "2024-07-16T23:28:28.271626Z",
     "shell.execute_reply": "2024-07-16T23:28:28.270437Z"
    },
    "papermill": {
     "duration": 35.687159,
     "end_time": "2024-07-16T23:28:28.274239",
     "exception": false,
     "start_time": "2024-07-16T23:27:52.587080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "disney = preprocess_reviews(disney, ft)\n",
    "universal = preprocess_reviews(universal, ft)\n",
    "museum = preprocess_reviews(museum, ft)\n",
    "paignton = preprocess_reviews(paignton, ft)\n",
    "newquay = preprocess_reviews(newquay, ft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c58590d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.305048Z",
     "iopub.status.busy": "2024-07-16T23:28:28.304635Z",
     "iopub.status.idle": "2024-07-16T23:28:28.534651Z",
     "shell.execute_reply": "2024-07-16T23:28:28.533309Z"
    },
    "papermill": {
     "duration": 0.24794,
     "end_time": "2024-07-16T23:28:28.537118",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.289178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_disney, y_disney = extract_features_labels(disney)\n",
    "X_universal, y_universal = extract_features_labels(universal)\n",
    "X_museum, y_museum = extract_features_labels(museum)\n",
    "X_paignton, y_paignton = extract_features_labels(paignton)\n",
    "X_newquay, y_newquay = extract_features_labels(newquay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e18020fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.567702Z",
     "iopub.status.busy": "2024-07-16T23:28:28.567287Z",
     "iopub.status.idle": "2024-07-16T23:28:28.573854Z",
     "shell.execute_reply": "2024-07-16T23:28:28.572800Z"
    },
    "papermill": {
     "duration": 0.024612,
     "end_time": "2024-07-16T23:28:28.576302",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.551690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a custom dataset class\n",
    "class ReviewDataset(Dataset):\n",
    "    def __init__(self, reviews, sentiments):\n",
    "        self.reviews = reviews\n",
    "        self.sentiments = sentiments\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.reviews)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return torch.tensor(self.reviews[idx], dtype=torch.float32), torch.tensor(self.sentiments[idx], dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "aff1ca5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.608443Z",
     "iopub.status.busy": "2024-07-16T23:28:28.607469Z",
     "iopub.status.idle": "2024-07-16T23:28:28.613068Z",
     "shell.execute_reply": "2024-07-16T23:28:28.611999Z"
    },
    "papermill": {
     "duration": 0.02323,
     "end_time": "2024-07-16T23:28:28.615249",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.592019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "disney_dataset = ReviewDataset(X_disney, y_disney)\n",
    "universal_dataset = ReviewDataset(X_universal, y_universal)\n",
    "museum_dataset = ReviewDataset(X_museum, y_museum)\n",
    "paignton_dataset = ReviewDataset(X_paignton, y_paignton)\n",
    "newquay_dataset = ReviewDataset(X_newquay, y_newquay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f015be97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.645517Z",
     "iopub.status.busy": "2024-07-16T23:28:28.645116Z",
     "iopub.status.idle": "2024-07-16T23:28:28.675467Z",
     "shell.execute_reply": "2024-07-16T23:28:28.674549Z"
    },
    "papermill": {
     "duration": 0.048276,
     "end_time": "2024-07-16T23:28:28.677736",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.629460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Weighted Random Sampler\n",
    "weights = [0.3 / len(disney_dataset), 0.3 / len(universal_dataset), 0.4 / len(museum_dataset)]\n",
    "sampler = WeightedRandomSampler(weights=[weights[0]] * len(disney_dataset) + \n",
    "                                       [weights[1]] * len(universal_dataset) + \n",
    "                                       [weights[2]] * len(museum_dataset), \n",
    "                                num_samples=len(disney_dataset) + len(universal_dataset) + len(museum_dataset), replacement=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "da3d6ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.707953Z",
     "iopub.status.busy": "2024-07-16T23:28:28.707549Z",
     "iopub.status.idle": "2024-07-16T23:28:28.713271Z",
     "shell.execute_reply": "2024-07-16T23:28:28.712082Z"
    },
    "papermill": {
     "duration": 0.023703,
     "end_time": "2024-07-16T23:28:28.715641",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.691938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Combine datasets\n",
    "combined_dataset = torch.utils.data.ConcatDataset([disney_dataset, universal_dataset, museum_dataset])\n",
    "combined_loader = DataLoader(combined_dataset, batch_size=32, sampler=sampler, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1f142a72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.745981Z",
     "iopub.status.busy": "2024-07-16T23:28:28.745571Z",
     "iopub.status.idle": "2024-07-16T23:28:28.752772Z",
     "shell.execute_reply": "2024-07-16T23:28:28.751698Z"
    },
    "papermill": {
     "duration": 0.024817,
     "end_time": "2024-07-16T23:28:28.754896",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.730079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the model\n",
    "class ANN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(ANN, self).__init__()\n",
    "        self.layer1 = nn.Linear(300, 128)\n",
    "        self.layer2 = nn.Linear(128, 64)\n",
    "        self.layer3 = nn.Linear(64, 32)\n",
    "        self.layer4 = nn.Linear(32, 1)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.relu(self.layer1(x))\n",
    "        x = self.relu(self.layer2(x))\n",
    "        x = self.relu(self.layer3(x))\n",
    "        x = self.sigmoid(self.layer4(x))\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3b959f87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:28.785554Z",
     "iopub.status.busy": "2024-07-16T23:28:28.785145Z",
     "iopub.status.idle": "2024-07-16T23:28:29.546133Z",
     "shell.execute_reply": "2024-07-16T23:28:29.544918Z"
    },
    "papermill": {
     "duration": 0.779504,
     "end_time": "2024-07-16T23:28:29.548793",
     "exception": false,
     "start_time": "2024-07-16T23:28:28.769289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize the model, loss function and optimizer\n",
    "model = ANN()\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fe5a30a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:28:29.579059Z",
     "iopub.status.busy": "2024-07-16T23:28:29.578629Z",
     "iopub.status.idle": "2024-07-16T23:29:50.743081Z",
     "shell.execute_reply": "2024-07-16T23:29:50.741899Z"
    },
    "papermill": {
     "duration": 81.182264,
     "end_time": "2024-07-16T23:29:50.745452",
     "exception": false,
     "start_time": "2024-07-16T23:28:29.563188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10, Loss: 0.24695807695388794\n",
      "Epoch 2/10, Loss: 0.12768076360225677\n",
      "Epoch 3/10, Loss: 0.11864808946847916\n",
      "Epoch 4/10, Loss: 0.03672102466225624\n",
      "Epoch 5/10, Loss: 0.13287654519081116\n",
      "Epoch 6/10, Loss: 0.029179053381085396\n",
      "Epoch 7/10, Loss: 0.17614561319351196\n",
      "Epoch 8/10, Loss: 0.1064322292804718\n",
      "Epoch 9/10, Loss: 0.27089154720306396\n",
      "Epoch 10/10, Loss: 0.36081698536872864\n"
     ]
    }
   ],
   "source": [
    "# Training the model\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    for reviews, sentiments in combined_loader:\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(reviews).squeeze()\n",
    "        loss = criterion(outputs, sentiments)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1bc88ab6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:50.776740Z",
     "iopub.status.busy": "2024-07-16T23:29:50.776333Z",
     "iopub.status.idle": "2024-07-16T23:29:50.782916Z",
     "shell.execute_reply": "2024-07-16T23:29:50.781883Z"
    },
    "papermill": {
     "duration": 0.024834,
     "end_time": "2024-07-16T23:29:50.785107",
     "exception": false,
     "start_time": "2024-07-16T23:29:50.760273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Evaluation\n",
    "def evaluate(model, dataset):\n",
    "    loader = DataLoader(dataset, batch_size=32, shuffle=False)\n",
    "    model.eval()\n",
    "    predictions, actuals = [], []\n",
    "    with torch.no_grad():\n",
    "        for reviews, sentiments in loader:\n",
    "            outputs = model(reviews).squeeze()\n",
    "            predicted_labels = (outputs > 0.5).float()\n",
    "            predictions.extend(predicted_labels.numpy())\n",
    "            actuals.extend(sentiments.numpy())\n",
    "    return np.array(predictions), np.array(actuals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6c897891",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:50.816540Z",
     "iopub.status.busy": "2024-07-16T23:29:50.816144Z",
     "iopub.status.idle": "2024-07-16T23:29:50.943885Z",
     "shell.execute_reply": "2024-07-16T23:29:50.942768Z"
    },
    "papermill": {
     "duration": 0.146499,
     "end_time": "2024-07-16T23:29:50.946394",
     "exception": false,
     "start_time": "2024-07-16T23:29:50.799895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Paignton Predictions: [0. 1. 1. ... 1. 1. 0.]\n",
      "Paignton Actuals: [0. 0. 0. ... 1. 1. 1.]\n",
      "Newquay Predictions: [1. 1. 1. ... 1. 1. 1.]\n",
      "Newquay Actuals: [0. 0. 0. ... 0. 0. 1.]\n"
     ]
    }
   ],
   "source": [
    "pred_paignton, actual_paignton = evaluate(model, paignton_dataset)\n",
    "pred_newquay, actual_newquay = evaluate(model, newquay_dataset)\n",
    "\n",
    "# Print evaluation results\n",
    "print(\"Paignton Predictions:\", pred_paignton)\n",
    "print(\"Paignton Actuals:\", actual_paignton)\n",
    "print(\"Newquay Predictions:\", pred_newquay)\n",
    "print(\"Newquay Actuals:\", actual_newquay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5413f568",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:50.978695Z",
     "iopub.status.busy": "2024-07-16T23:29:50.978283Z",
     "iopub.status.idle": "2024-07-16T23:29:50.983957Z",
     "shell.execute_reply": "2024-07-16T23:29:50.982854Z"
    },
    "papermill": {
     "duration": 0.024595,
     "end_time": "2024-07-16T23:29:50.986297",
     "exception": false,
     "start_time": "2024-07-16T23:29:50.961702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Train FastText model\n",
    "# fasttext_model = FastText(sentences=pd.concat([X_train1, X_train2, X_train3]).tolist(), window=5, min_count=5, workers=4)\n",
    "\n",
    "# # Function to generate FastText embeddings\n",
    "# def generate_fasttext_embeddings(text_data):\n",
    "#     embeddings = []\n",
    "#     for text in text_data:\n",
    "#         embedding = [fasttext_model.wv[word] for word in text.split() if word in fasttext_model.wv]\n",
    "#         if embedding:\n",
    "#             embeddings.append(np.mean(embedding, axis=0))\n",
    "#         else:\n",
    "#             embeddings.append(np.zeros(100))  # Handle out-of-vocabulary words\n",
    "#     return np.array(embeddings)\n",
    "\n",
    "# # Generate FastText embeddings for train and test data\n",
    "# X_train1_embeddings = generate_fasttext_embeddings(X_train1)\n",
    "# X_test1_embeddings = generate_fasttext_embeddings(X_test1)\n",
    "\n",
    "# X_train2_embeddings = generate_fasttext_embeddings(X_train2)\n",
    "# X_test2_embeddings = generate_fasttext_embeddings(X_test2)\n",
    "\n",
    "# X_train3_embeddings = generate_fasttext_embeddings(X_train3)\n",
    "# X_test3_embeddings = generate_fasttext_embeddings(X_test3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b45fc31c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.018897Z",
     "iopub.status.busy": "2024-07-16T23:29:51.018483Z",
     "iopub.status.idle": "2024-07-16T23:29:51.023453Z",
     "shell.execute_reply": "2024-07-16T23:29:51.022478Z"
    },
    "papermill": {
     "duration": 0.023201,
     "end_time": "2024-07-16T23:29:51.025522",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.002321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "# max_length = 128\n",
    "\n",
    "# # Function to tokenize and encode text data\n",
    "# def tokenize_and_encode(text_data):\n",
    "#     return tokenizer(text_data.tolist(), padding='max_length', truncation=True, max_length=max_length, return_tensors='tf')\n",
    "\n",
    "# # Tokenize and encode train and test data\n",
    "# X_train1_encoded = tokenize_and_encode(X_train1)\n",
    "# X_test1_encoded = tokenize_and_encode(X_test1)\n",
    "\n",
    "# X_train2_encoded = tokenize_and_encode(X_train2)\n",
    "# X_test2_encoded = tokenize_and_encode(X_test2)\n",
    "\n",
    "# X_train3_encoded = tokenize_and_encode(X_train3)\n",
    "# X_test3_encoded = tokenize_and_encode(X_test3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "486c66eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.057728Z",
     "iopub.status.busy": "2024-07-16T23:29:51.057340Z",
     "iopub.status.idle": "2024-07-16T23:29:51.064334Z",
     "shell.execute_reply": "2024-07-16T23:29:51.063292Z"
    },
    "papermill": {
     "duration": 0.026083,
     "end_time": "2024-07-16T23:29:51.066551",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.040468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Assuming you have precomputed FastText embeddings\n",
    "# embedding_dim = 300  # Adjust this according to your FastText embedding dimensions\n",
    "\n",
    "# # Define inputs\n",
    "# input_ids = Input(shape=(128,), dtype=tf.int32, name='input_ids')\n",
    "# token_type_ids = Input(shape=(128,), dtype=tf.int32, name='token_type_ids')\n",
    "# attention_mask = Input(shape=(128,), dtype=tf.int32, name='attention_mask')\n",
    "\n",
    "# # Embedding layer (assuming precomputed FastText embeddings)\n",
    "# embedding_layer = Embedding(input_dim=100, output_dim=embedding_dim, trainable=True)\n",
    "# embeddings = embedding_layer(input_ids)\n",
    "\n",
    "# # Concatenate embeddings with token_type_ids and attention_mask\n",
    "# x = Concatenate()([embeddings, tf.expand_dims(tf.cast(token_type_ids, tf.float32), axis=-1), tf.expand_dims(tf.cast(attention_mask, tf.float32), axis=-1)])\n",
    "\n",
    "# # Flatten or use GlobalAveragePooling1D to prepare for dense layers\n",
    "# x = Flatten()(x)\n",
    "\n",
    "# # ANN layers\n",
    "# x = Dense(256, activation='relu')(x)\n",
    "# x = Dense(128, activation='relu')(x)\n",
    "# x = Dense(64, activation='relu')(x)\n",
    "\n",
    "# # Output layer for binary classification with sigmoid activation\n",
    "# outputs = Dense(1, activation='sigmoid')(x)\n",
    "\n",
    "# # Define the model\n",
    "# model = Model(inputs=[input_ids, token_type_ids, attention_mask], outputs=outputs)\n",
    "\n",
    "# # Compile the model\n",
    "# model.compile(optimizer='adam',\n",
    "#               loss='binary_crossentropy',\n",
    "#               metrics=['accuracy'])\n",
    "\n",
    "# # Assuming you have three weighted datasets and corresponding test sets\n",
    "# train_weights = [0.3, 0.3, 0.4]\n",
    "\n",
    "# # Assuming train_1, train_2, train_3 are your weighted training datasets\n",
    "# # train_1, train_2, train_3 should be tuples of (input_ids, token_type_ids, attention_mask, labels)\n",
    "\n",
    "# # Concatenate all input_ids, token_type_ids, attention_mask, and labels\n",
    "# all_input_ids = tf.concat([X_train1_encoded[0], X_train2_encoded[0], X_train3_encoded[0]], axis=0)\n",
    "# all_token_type_ids = tf.concat([X_train1_encoded[1], X_train2_encoded[1], X_train3_encoded[1]], axis=0)\n",
    "# all_attention_mask = tf.concat([X_train1_encoded[2], X_train2_encoded[2], X_train3_encoded[2]], axis=0)\n",
    "# all_labels = tf.concat([X_train1_encoded[3], X_train2_encoded[3], X_train3_encoded[3]], axis=0)\n",
    "\n",
    "# # Train the model on all datasets with respective weights\n",
    "# history = model.fit([all_input_ids, all_token_type_ids, all_attention_mask], all_labels,\n",
    "#                     epochs=10,\n",
    "#                     batch_size=32,\n",
    "#                     sample_weight=[train_weights[0] * tf.ones_like(X_train1_encoded[0][:, 0]),\n",
    "#                                    train_weights[1] * tf.ones_like(X_train2_encoded[0][:, 0]),\n",
    "#                                    train_weights[2] * tf.ones_like(X_train3_encoded[0][:, 0])])\n",
    "\n",
    "# # Evaluate on test datasets\n",
    "# test_results_1 = model.evaluate([X_test1_encoding[0], X_test1_encoding[1], X_test1_encoding[2]], X_test1_encoding[3])\n",
    "# test_results_2 = model.evaluate([X_test2_encoding[0], X_test2_encoding[1], X_test2_encoding[2]], X_test2_encoding[3])\n",
    "# test_results_3 = model.evaluate([X_test3_encoding[0], X_test3_encoding[1], X_test3_encoding[2]], X_test3_encoding[3])\n",
    "\n",
    "# print(\"Test results for test_1:\")\n",
    "# print(f\"Loss: {test_results_1[0]}, Accuracy: {test_results_1[1]}\")\n",
    "\n",
    "# print(\"\\nTest results for test_2:\")\n",
    "# print(f\"Loss: {test_results_2[0]}, Accuracy: {test_results_2[1]}\")\n",
    "\n",
    "# print(\"\\nTest results for test_3:\")\n",
    "# print(f\"Loss: {test_results_3[0]}, Accuracy: {test_results_3[1]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1012801c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.099176Z",
     "iopub.status.busy": "2024-07-16T23:29:51.098774Z",
     "iopub.status.idle": "2024-07-16T23:29:51.105877Z",
     "shell.execute_reply": "2024-07-16T23:29:51.104700Z"
    },
    "papermill": {
     "duration": 0.026042,
     "end_time": "2024-07-16T23:29:51.108201",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.082159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Function to create the model\n",
    "# def create_model():\n",
    "#     # Define the BERT model\n",
    "#     bert_model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=3)\n",
    "\n",
    "#     # Define input layers\n",
    "#     input_ids = Input(shape=(100,), dtype=tf.int32, name='input_ids')\n",
    "# #     attention_mask = Input(shape=(128,), dtype=tf.int32, name='attention_mask')\n",
    "#     fasttext_embeddings = Input(shape=(100,), dtype=tf.float32, name='fasttext_embeddings')\n",
    "\n",
    "#     # BERT embeddings\n",
    "#     bert_output = bert_model(input_ids)[0]\n",
    "    \n",
    "#     # Dropout some samples randomly\n",
    "#     dropout = Dropout(0.1)(bert_output)\n",
    "\n",
    "#     # Concatenate BERT embeddings with FastText embeddings\n",
    "#     concatenated_features = Concatenate()([dropout, fasttext_embeddings])\n",
    "\n",
    "#     # Define model architecture\n",
    "#     dense = Dense(128, activation='relu')(concatenated_features)\n",
    "#     dropout = Dropout(0.1)(dense)\n",
    "#     output = Dense(3, activation='softmax')(dropout)\n",
    "    \n",
    "#     model = Model(inputs=[input_ids, fasttext_embeddings], outputs=output)\n",
    "#     return model\n",
    "\n",
    "# # Define model\n",
    "# model = create_model()\n",
    "\n",
    "# # Define early stopping callback\n",
    "# early_stopping = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)\n",
    "\n",
    "# # Compile model\n",
    "# optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5)\n",
    "# model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# # Training dataset weights\n",
    "# train_weights = np.concatenate([\n",
    "#     np.full(len(train_1), 0.3),\n",
    "#     np.full(len(train_2), 0.3),\n",
    "#     np.full(len(train_3), 0.4)\n",
    "# ])\n",
    "\n",
    "# # Combine the training datasets\n",
    "# X_train_input_ids = np.concatenate([train_1_input_ids, train_2_input_ids, train_3_input_ids])\n",
    "# X_train_fasttext = np.concatenate([train_1_fasttext, train_2_fasttext, train_3_fasttext])\n",
    "# y_train = np.concatenate([train_1_labels, train_2_labels, train_3_labels])\n",
    "\n",
    "# # Train model\n",
    "# history = model.fit(\n",
    "#     [X_train_input_ids, X_train_fasttext], \n",
    "#     to_categorical(y_train, num_classes=3), \n",
    "#     sample_weight=train_weights,\n",
    "#     epochs=7, \n",
    "#     batch_size=32, \n",
    "#     validation_split=0.2, \n",
    "#     callbacks=[early_stopping]\n",
    "# )\n",
    "\n",
    "# # Combine the test datasets\n",
    "# X_test_input_ids = np.concatenate([test_1_input_ids, test_2_input_ids, test_3_input_ids])\n",
    "# X_test_fasttext = np.concatenate([test_1_fasttext, test_2_fasttext, test_3_fasttext])\n",
    "# y_test = np.concatenate([test_1_labels, test_2_labels, test_3_labels])\n",
    "\n",
    "# # Evaluate model\n",
    "# loss, accuracy = model.evaluate(\n",
    "#     [X_test_input_ids, X_test_fasttext], \n",
    "#     to_categorical(y_test, num_classes=3)\n",
    "# )\n",
    "# print(f'Test Loss: {loss}, Test Accuracy: {accuracy}')\n",
    "\n",
    "# # Predict and evaluate performance\n",
    "# y_prob_bert = model.predict([X_test_input_ids, X_test_fasttext])\n",
    "# y_pred_bert = np.argmax(y_prob_bert, axis=1)\n",
    "\n",
    "# bert_roc_auc_score = roc_auc_score(to_categorical(y_test, num_classes=3), y_prob_bert, multi_class='ovr')\n",
    "# bert_accuracy_score = accuracy_score(y_test, y_pred_bert)\n",
    "\n",
    "# print('Model overall ROC AUC score: {:.3f}'.format(bert_roc_auc_score))\n",
    "# print('Model overall accuracy: {:.3f}'.format(bert_accuracy_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c88b67a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.140623Z",
     "iopub.status.busy": "2024-07-16T23:29:51.140192Z",
     "iopub.status.idle": "2024-07-16T23:29:51.147005Z",
     "shell.execute_reply": "2024-07-16T23:29:51.145958Z"
    },
    "papermill": {
     "duration": 0.026051,
     "end_time": "2024-07-16T23:29:51.149466",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.123415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Combine train data\n",
    "# X_train_encoded = {key: tf.concat([X_train1_encoded[key], X_train2_encoded[key], X_train3_encoded[key]], axis=0) for key in X_train1_encoded.keys()}\n",
    "# X_train_embeddings = np.concatenate([X_train1_embeddings, X_train2_embeddings, X_train3_embeddings], axis=0)\n",
    "# y_train = np.concatenate([y_train1, y_train2, y_train3], axis=0)\n",
    "# weights = np.concatenate([np.full(len(X_train1), 0.3), np.full(len(X_train2), 0.3), np.full(len(X_train3), 0.4)])\n",
    "\n",
    "# # Combine test data\n",
    "# X_test_encoded = {key: tf.concat([X_test1_encoded[key], X_test2_encoded[key], X_test3_encoded[key]], axis=0) for key in X_test1_encoded.keys()}\n",
    "# X_test_embeddings = np.concatenate([X_test1_embeddings, X_test2_embeddings, X_test3_embeddings], axis=0)\n",
    "# y_test = np.concatenate([y_test1, y_test2, y_test3], axis=0)\n",
    "\n",
    "# # Define model architecture\n",
    "# def create_model():\n",
    "#     bert_model = TFBertModel.from_pretrained('bert-base-uncased')\n",
    "#     input_ids = Input(shape=(max_length,), dtype=tf.int32, name='input_ids')\n",
    "#     print(type(input_ids))\n",
    "#     attention_mask = Input(shape=(max_length,), dtype=tf.int32, name='attention_mask')\n",
    "#     fasttext_embeddings = Input(shape=(100,), dtype=tf.float32, name='fasttext_embeddings')\n",
    "    \n",
    "#     # BERT embeddings\n",
    "#     bert_output = bert_model(input_ids)[0]\n",
    "#     dropout = Dropout(0.1)(bert_output[:, 0, :])  # Use the output of [CLS] token\n",
    "\n",
    "#     # Concatenate BERT embeddings with FastText embeddings\n",
    "#     concatenated_features = Concatenate()([dropout, fasttext_embeddings])\n",
    "\n",
    "#     # Define model architecture\n",
    "#     dense = Dense(128, activation='relu')(concatenated_features)\n",
    "#     dropout = Dropout(0.1)(dense)\n",
    "#     output = Dense(3, activation='softmax')(dropout)\n",
    "    \n",
    "#     model = Model(inputs=[input_ids, attention_mask, fasttext_embeddings], outputs=output)\n",
    "#     return model\n",
    "\n",
    "# model = create_model()\n",
    "\n",
    "# # Define early stopping callback\n",
    "# early_stopping = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)\n",
    "\n",
    "# # Compile model\n",
    "# optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5)\n",
    "# model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# # Train model\n",
    "# history = model.fit(\n",
    "#     [X_train_encoded['input_ids'], X_train_encoded['attention_mask'], X_train_embeddings],\n",
    "#     tf.keras.utils.to_categorical(y_train, num_classes=3),\n",
    "#     sample_weight=weights,\n",
    "#     epochs=7,\n",
    "#     batch_size=32,\n",
    "#     validation_split=0.2,\n",
    "#     callbacks=[early_stopping]\n",
    "# )\n",
    "\n",
    "# # Evaluate model\n",
    "# loss, accuracy = model.evaluate(\n",
    "#     [X_test_encoded['input_ids'], X_test_encoded['attention_mask'], X_test_embeddings],\n",
    "#     tf.keras.utils.to_categorical(y_test, num_classes=3)\n",
    "# )\n",
    "# print(f'Test Loss: {loss}, Test Accuracy: {accuracy}')\n",
    "\n",
    "# y_prob_bert = model.predict([X_test_encoded['input_ids'], X_test_encoded['attention_mask'], X_test_embeddings])\n",
    "# y_pred_bert = np.argmax(y_prob_bert, axis=1)\n",
    "\n",
    "# bert_roc_auc_score = roc_auc_score(tf.keras.utils.to_categorical(y_test, num_classes=3), y_prob_bert, multi_class='ovr')\n",
    "# bert_accuracy_score = accuracy_score(y_test, y_pred_bert)\n",
    "\n",
    "# print('Model overall ROC AUC score: {:.3f}'.format(bert_roc_auc_score))\n",
    "# print('Model overall accuracy: {:.3f}'.format(bert_accuracy_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "521e8663",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.182581Z",
     "iopub.status.busy": "2024-07-16T23:29:51.182168Z",
     "iopub.status.idle": "2024-07-16T23:29:51.186917Z",
     "shell.execute_reply": "2024-07-16T23:29:51.185771Z"
    },
    "papermill": {
     "duration": 0.024477,
     "end_time": "2024-07-16T23:29:51.189278",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.164801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "# model = BertModel.from_pretrained('bert-base-uncased')\n",
    "\n",
    "# def extract_features(text):\n",
    "#     inputs = tokenizer(text, return_tensors='pt', max_length=512, truncation=True, padding=True)\n",
    "#     outputs = model(**inputs)\n",
    "#     return outputs.last_hidden_state.mean(dim=1).detach().numpy()\n",
    "\n",
    "# for df in [disney, universal, museum]:\n",
    "#     df['features'] = df['cleaned_review'].apply(lambda x: extract_features(x).flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ff27b49f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.221615Z",
     "iopub.status.busy": "2024-07-16T23:29:51.221205Z",
     "iopub.status.idle": "2024-07-16T23:29:51.226149Z",
     "shell.execute_reply": "2024-07-16T23:29:51.224895Z"
    },
    "papermill": {
     "duration": 0.023626,
     "end_time": "2024-07-16T23:29:51.228320",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.204694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_train1, X_val1, y_train1, y_val1 = train_test_split(\n",
    "#     np.stack(disney['features'].values), disney['sentiment'].values, test_size=0.2, random_state=42)\n",
    "\n",
    "# X_train2, X_val2, y_train2, y_val2 = train_test_split(\n",
    "#     np.stack(universal['features'].values), universal['sentiment'].values, test_size=0.2, random_state=42)\n",
    "\n",
    "# X_train3, X_val3, y_train3, y_val3 = train_test_split(\n",
    "#     np.stack(museum['features'].values), museum['sentiment'].values, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ddb6a5e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.261448Z",
     "iopub.status.busy": "2024-07-16T23:29:51.260402Z",
     "iopub.status.idle": "2024-07-16T23:29:51.265921Z",
     "shell.execute_reply": "2024-07-16T23:29:51.264665Z"
    },
    "papermill": {
     "duration": 0.024493,
     "end_time": "2024-07-16T23:29:51.268210",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.243717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Combine the training data\n",
    "# X_train = np.concatenate((X_train1, X_train2, X_train3), axis=0)\n",
    "# y_train = np.concatenate((y_train1, y_train2, y_train3), axis=0)\n",
    "\n",
    "# # Assign weights to the datasets\n",
    "# weights = np.concatenate((np.full(len(X_train1), 0.3), np.full(len(X_train2), 0.3), np.full(len(X_train3), 0.4)))\n",
    "\n",
    "# # Train the logistic regression model\n",
    "# model = LogisticRegression(max_iter=1000)\n",
    "# model.fit(X_train, y_train, sample_weight=weights)\n",
    "\n",
    "# # Combine the validation data\n",
    "# X_val = np.concatenate((X_val1, X_val2, X_val3), axis=0)\n",
    "# y_val = np.concatenate((y_val1, y_val2, y_val3), axis=0)\n",
    "\n",
    "# # Evaluate the model\n",
    "# y_pred = model.predict(X_val)\n",
    "# accuracy = accuracy_score(y_val, y_pred)\n",
    "# print(f'Validation Accuracy: {accuracy}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0dee397d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-16T23:29:51.301472Z",
     "iopub.status.busy": "2024-07-16T23:29:51.301069Z",
     "iopub.status.idle": "2024-07-16T23:29:51.306180Z",
     "shell.execute_reply": "2024-07-16T23:29:51.304771Z"
    },
    "papermill": {
     "duration": 0.024419,
     "end_time": "2024-07-16T23:29:51.308684",
     "exception": false,
     "start_time": "2024-07-16T23:29:51.284265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Print accuracy\n",
    "# print(f'Validation Accuracy: {accuracy}')\n",
    "# print(classification_report(y_val, y_pred))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 1896456,
     "datasetId": 1105807,
     "sourceId": 1858576,
     "sourceType": "datasetVersion"
    },
    {
     "databundleVersionId": 19053,
     "datasetId": 14154,
     "sourceId": 19053,
     "sourceType": "datasetVersion"
    },
    {
     "databundleVersionId": 2345651,
     "datasetId": 1389694,
     "sourceId": 2304311,
     "sourceType": "datasetVersion"
    },
    {
     "databundleVersionId": 4608666,
     "datasetId": 2655259,
     "sourceId": 4547702,
     "sourceType": "datasetVersion"
    },
    {
     "databundleVersionId": 9134968,
     "datasetId": 5391899,
     "sourceId": 8970763,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 616.44577,
   "end_time": "2024-07-16T23:29:54.397441",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-16T23:19:37.951671",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

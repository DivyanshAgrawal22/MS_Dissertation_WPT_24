{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install googlemaps","metadata":{"execution":{"iopub.status.busy":"2024-07-03T22:47:48.004422Z","iopub.execute_input":"2024-07-03T22:47:48.005008Z","iopub.status.idle":"2024-07-03T22:48:08.470798Z","shell.execute_reply.started":"2024-07-03T22:47:48.004963Z","shell.execute_reply":"2024-07-03T22:48:08.469369Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Collecting googlemaps\n  Downloading googlemaps-4.10.0.tar.gz (33 kB)\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: requests<3.0,>=2.20.0 in /opt/conda/lib/python3.10/site-packages (from googlemaps) (2.32.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.20.0->googlemaps) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.20.0->googlemaps) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.20.0->googlemaps) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.20.0->googlemaps) (2024.2.2)\nBuilding wheels for collected packages: googlemaps\n  Building wheel for googlemaps (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for googlemaps: filename=googlemaps-4.10.0-py3-none-any.whl size=40711 sha256=4b61c2ce2714c7b61d75acd5ecf7860d8782188b483f3595dfd4983a6dab7236\n  Stored in directory: /root/.cache/pip/wheels/17/f8/79/999d5d37118fd35d7219ef57933eb9d09886c4c4503a800f84\nSuccessfully built googlemaps\nInstalling collected packages: googlemaps\nSuccessfully installed googlemaps-4.10.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import googlemaps\nimport pandas as pd\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Your Google Places API key\nAPI_KEY = 'AIzaSyBH_DO35NwbTNg4HzvIQWIO7o3TFlmE32s'\n\ndef get_place_id(gmaps, place_name):\n    \"\"\"\n    Fetch the Place ID for a given place name using the Google Places API.\n    \"\"\"\n    result = gmaps.find_place(input=place_name, input_type=\"textquery\", fields=[\"place_id\"])\n    \n    if result[\"candidates\"]:\n        place_id = result[\"candidates\"][0][\"place_id\"]\n        print(f\"Found Place ID for {place_name}: {place_id}\")\n        return place_id\n    else:\n        print(f\"No place ID found for {place_name}\")\n        return None\n\ndef get_place_reviews(gmaps, place_id):\n    \"\"\"\n    Fetch reviews for a given Place ID using the Google Places API.\n    \"\"\"\n    place_details = gmaps.place(place_id=place_id, fields=[\"reviews\"])\n    if 'result' in place_details and 'reviews' in place_details['result']:\n        return place_details['result']['reviews']\n    else:\n        print(f\"No reviews found for Place ID {place_id}\")\n        return []\n\ndef fetch_and_save_reviews(gmaps, place_name, output_file):\n    \"\"\"\n    Fetch reviews for a place name and save them to an Excel file.\n    \"\"\"\n    print(f\"Fetching Place ID for {place_name}...\")\n    place_id = get_place_id(gmaps, place_name)\n    \n    if place_id:\n        print(f\"Fetching reviews for {place_name}...\")\n        reviews = get_place_reviews(gmaps, place_id)\n        all_reviews = []\n        \n        if reviews:\n            for review in reviews:\n                all_reviews.append({\n                    'Place': place_name,\n                    'Author': review.get('author_name'),\n                    'Rating': review.get('rating'),\n                    'Text': review.get('text'),\n                    'Time': review.get('time')\n                })\n            \n            # Save to Excel\n            df = pd.DataFrame(all_reviews)\n            df.to_excel(output_file, index=False)\n            print(f\"Reviews saved to {output_file}\")\n        else:\n            print(f\"No reviews fetched for {place_name}.\")\n    else:\n        print(f\"No Place ID found for {place_name}, no reviews fetched.\")","metadata":{"execution":{"iopub.status.busy":"2024-07-03T22:58:18.442920Z","iopub.execute_input":"2024-07-03T22:58:18.443416Z","iopub.status.idle":"2024-07-03T22:58:18.459944Z","shell.execute_reply.started":"2024-07-03T22:58:18.443382Z","shell.execute_reply":"2024-07-03T22:58:18.458483Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"gmaps = googlemaps.Client(key=API_KEY)\n\nplaces = {\n    \"Paignton Zoo Environmental Park\": \"paignton_zoo_reviews.xlsx\",\n    \"Newquay Zoo\": \"newquay_zoo_reviews.xlsx\"\n}\n\nfor place_name, output_file in places.items():\n    fetch_and_save_reviews(gmaps, place_name, output_file)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T22:58:21.891845Z","iopub.execute_input":"2024-07-03T22:58:21.892308Z","iopub.status.idle":"2024-07-03T22:58:22.069087Z","shell.execute_reply.started":"2024-07-03T22:58:21.892275Z","shell.execute_reply":"2024-07-03T22:58:22.067941Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Fetching Place ID for Paignton Zoo Environmental Park...\nFound Place ID for Paignton Zoo Environmental Park: ChIJ01trNe0abUgRAeyKLYuyznc\nFetching reviews for Paignton Zoo Environmental Park...\nReviews saved to paignton_zoo_reviews.xlsx\nFetching Place ID for Newquay Zoo...\nFound Place ID for Newquay Zoo: ChIJWz8_XSQOa0gRslKwKup_2Ww\nFetching reviews for Newquay Zoo...\nReviews saved to newquay_zoo_reviews.xlsx\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}